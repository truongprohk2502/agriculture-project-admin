[{"E:\\Visual Studio Code\\agriculture-manager\\src\\index.js":"1","E:\\Visual Studio Code\\agriculture-manager\\src\\App.js":"2","E:\\Visual Studio Code\\agriculture-manager\\src\\components\\header\\index.js":"3","E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\index.js":"4","E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\auth.js":"5","E:\\Visual Studio Code\\agriculture-manager\\src\\constants\\apiUrl.js":"6","E:\\Visual Studio Code\\agriculture-manager\\src\\utils\\setAuthorizationToken.js":"7","E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\auth.js":"8","E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\index.js":"9","E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\auth.js":"10","E:\\Visual Studio Code\\agriculture-manager\\src\\constants\\errorMessages.js":"11","E:\\Visual Studio Code\\agriculture-manager\\src\\constants\\ActionTypes.js":"12","E:\\Visual Studio Code\\agriculture-manager\\src\\constants\\routePath.js":"13","E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\login\\index.js":"14","E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\index.js":"15","E:\\Visual Studio Code\\agriculture-manager\\src\\routes\\privateRoute.js":"16","E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-project\\index.js":"17","E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-user\\index.js":"18","E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\project.js":"19","E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\project.js":"20","E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\project.js":"21","E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-phase\\index.js":"22","E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\phase.js":"23","E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\phase.js":"24","E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\phase.js":"25","E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-task\\index.js":"26","E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\task.js":"27","E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\measurement.js":"28","E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\task.js":"29","E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\material.js":"30","E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\measurement.js":"31","E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\material.js":"32","E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-material\\index.js":"33","E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-measurement\\index.js":"34","E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\task.js":"35","E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\material.js":"36","E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\measurement.js":"37","E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\user.js":"38","E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\user.js":"39","E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\user.js":"40"},{"size":729,"mtime":1607304454346,"results":"41","hashOfConfig":"42"},{"size":2562,"mtime":1608376105542,"results":"43","hashOfConfig":"42"},{"size":1901,"mtime":1607311681005,"results":"44","hashOfConfig":"42"},{"size":552,"mtime":1607610301560,"results":"45","hashOfConfig":"42"},{"size":1383,"mtime":1607311541268,"results":"46","hashOfConfig":"42"},{"size":1349,"mtime":1608369169222,"results":"47","hashOfConfig":"42"},{"size":255,"mtime":1607303573390,"results":"48","hashOfConfig":"42"},{"size":851,"mtime":1607311528080,"results":"49","hashOfConfig":"42"},{"size":420,"mtime":1607610438462,"results":"50","hashOfConfig":"42"},{"size":1055,"mtime":1607311642161,"results":"51","hashOfConfig":"42"},{"size":70,"mtime":1607304334504,"results":"52","hashOfConfig":"42"},{"size":4559,"mtime":1608370694702,"results":"53","hashOfConfig":"42"},{"size":78,"mtime":1607305009342,"results":"54","hashOfConfig":"42"},{"size":2500,"mtime":1607311733060,"results":"55","hashOfConfig":"42"},{"size":1057,"mtime":1607313886623,"results":"56","hashOfConfig":"42"},{"size":664,"mtime":1607305917393,"results":"57","hashOfConfig":"42"},{"size":16758,"mtime":1608376625483,"results":"58","hashOfConfig":"42"},{"size":2761,"mtime":1608368160264,"results":"59","hashOfConfig":"42"},{"size":4103,"mtime":1608370837912,"results":"60","hashOfConfig":"42"},{"size":2794,"mtime":1608370679199,"results":"61","hashOfConfig":"42"},{"size":3405,"mtime":1608370950337,"results":"62","hashOfConfig":"42"},{"size":8501,"mtime":1608376846723,"results":"63","hashOfConfig":"42"},{"size":2530,"mtime":1607524447198,"results":"64","hashOfConfig":"42"},{"size":1692,"mtime":1607519212978,"results":"65","hashOfConfig":"42"},{"size":1959,"mtime":1607524490927,"results":"66","hashOfConfig":"42"},{"size":11573,"mtime":1608376856655,"results":"67","hashOfConfig":"42"},{"size":1668,"mtime":1607525803023,"results":"68","hashOfConfig":"42"},{"size":2812,"mtime":1607526590677,"results":"69","hashOfConfig":"42"},{"size":2483,"mtime":1607526332994,"results":"70","hashOfConfig":"42"},{"size":2671,"mtime":1607526494774,"results":"71","hashOfConfig":"42"},{"size":1836,"mtime":1607526647360,"results":"72","hashOfConfig":"42"},{"size":1764,"mtime":1607526091807,"results":"73","hashOfConfig":"42"},{"size":7841,"mtime":1608376862723,"results":"74","hashOfConfig":"42"},{"size":7961,"mtime":1608376870978,"results":"75","hashOfConfig":"42"},{"size":1945,"mtime":1607527081545,"results":"76","hashOfConfig":"42"},{"size":1948,"mtime":1607530276161,"results":"77","hashOfConfig":"42"},{"size":2060,"mtime":1607530947426,"results":"78","hashOfConfig":"42"},{"size":1572,"mtime":1608365943352,"results":"79","hashOfConfig":"42"},{"size":904,"mtime":1608365884213,"results":"80","hashOfConfig":"42"},{"size":1027,"mtime":1608366198930,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"1umqjlh",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"84"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"84"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"84"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"84"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"84"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"84"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"E:\\Visual Studio Code\\agriculture-manager\\src\\index.js",[],["170","171"],"E:\\Visual Studio Code\\agriculture-manager\\src\\App.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\components\\header\\index.js",[],["172","173"],"E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\index.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\auth.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\constants\\apiUrl.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\utils\\setAuthorizationToken.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\auth.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\index.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\auth.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\constants\\errorMessages.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\constants\\ActionTypes.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\constants\\routePath.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\login\\index.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\index.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\routes\\privateRoute.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-project\\index.js",["174","175","176","177"],"import React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  Col,\r\n  Drawer,\r\n  Form,\r\n  Input,\r\n  Popconfirm,\r\n  Row,\r\n  Select,\r\n  Table,\r\n  Tag,\r\n  notification,\r\n} from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getSampleProject,\r\n  getActualProject,\r\n  postSampleProject,\r\n  deleteSampleProject,\r\n  putSampleProject,\r\n  putLockProject,\r\n} from \"../../../actions/project\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass ManageProject extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      screenType: \"\",\r\n      showDrawer: false,\r\n      drawerType: \"ADD\",\r\n      columnData: [],\r\n      name: \"\",\r\n      minimalScale: 0,\r\n      standardUnit: \"\",\r\n      estimatedCost: 0,\r\n      estimatedTime: 0,\r\n      estimatedTimeUnit: \"\",\r\n      estimatedQuantity: 0,\r\n      unitPrice: 0,\r\n      description: \"\",\r\n      editId: \"\",\r\n      standardGap: [],\r\n      newGap: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const userId = this.props.match?.params?.id_user;\r\n    if (userId) {\r\n      this.props.getActualProject({ id: userId });\r\n      this.setState({ screenType: \"ACTUAL\" });\r\n    } else {\r\n      this.props.getSampleProject();\r\n      this.setState({ screenType: \"SAMPLE\" });\r\n    }\r\n    const columnData = [\r\n      {\r\n        title: \"Tên dự án\",\r\n        dataIndex: \"name\",\r\n      },\r\n      {\r\n        title: \"Mô tả\",\r\n        dataIndex: \"description\",\r\n        width: 500,\r\n      },\r\n      {\r\n        title: \"Tiêu chuẩn\",\r\n        render: (data) => data.standardGap.join(\", \"),\r\n      },\r\n      {\r\n        title: \"Quy mô tối thiểu\",\r\n        dataIndex: \"minimalScale\",\r\n      },\r\n      {\r\n        title: \"Đơn vị chuẩn\",\r\n        dataIndex: \"standardUnit\",\r\n      },\r\n      {\r\n        title: \"Chi phí dự toán\",\r\n        dataIndex: \"estimatedCost\",\r\n      },\r\n      {\r\n        title: \"Đon vị thời gian\",\r\n        dataIndex: \"estimatedTimeUnit\",\r\n      },\r\n      {\r\n        title: \"Sản lượng dự toán\",\r\n        dataIndex: \"estimatedQuantity\",\r\n      },\r\n      {\r\n        title: \"Đơn giá\",\r\n        dataIndex: \"unitPrice\",\r\n      },\r\n      {\r\n        title: \"Hình ảnh\",\r\n        render: ({ images }) => (\r\n          <a href=\"\" onClick={() => this.showImages(images)}>\r\n            Hình ảnh\r\n          </a>\r\n        ),\r\n      },\r\n      {\r\n        title: \"Giai đoạn\",\r\n        render: ({ _id }) => (\r\n          <Link to={\"/phase/\" + _id + \"/\" + (userId ? \"0\" : \"1\")}>\r\n            Giai đoạn\r\n          </Link>\r\n        ),\r\n      },\r\n    ];\r\n    this.setState({\r\n      columnData: userId\r\n        ? [\r\n            ...columnData,\r\n            {\r\n              title: \"Hành động\",\r\n              render: ({ _id, isActive }) => (\r\n                <Popconfirm\r\n                  title=\"Bạn có chắc chắn？\"\r\n                  okText=\"Có\"\r\n                  cancelText=\"Không\"\r\n                  onConfirm={() => this.lockProject(_id, !isActive)}\r\n                >\r\n                  <a href=\"\">{isActive ? \"Khóa\" : \"Mở\"}</a>\r\n                </Popconfirm>\r\n              ),\r\n            },\r\n          ]\r\n        : [\r\n            ...columnData,\r\n            {\r\n              title: \"Sửa\",\r\n              render: ({ _id }) => (\r\n                <a onClick={() => this.editProject(_id)}>Sửa</a>\r\n              ),\r\n            },\r\n            {\r\n              title: \"Xóa\",\r\n              render: ({ _id }) => (\r\n                <Popconfirm\r\n                  title=\"Bạn có chắc chắn muốn xóa？\"\r\n                  okText=\"Có\"\r\n                  cancelText=\"Không\"\r\n                  onConfirm={() => this.deleteProject(_id)}\r\n                >\r\n                  <a href=\"\">Xóa</a>\r\n                </Popconfirm>\r\n              ),\r\n            },\r\n          ],\r\n    });\r\n  }\r\n\r\n  lockProject = (_id, isActive) => {\r\n    this.props.putLockProject({ _id, isActive });\r\n    notification[\"success\"]({\r\n      message: `${isActive ? \"Mở\" : \"Khóa\"} dự án thành công`,\r\n    });\r\n  };\r\n\r\n  openNotificationWithIcon = (type) => {\r\n    notification[type]({\r\n      message:\r\n        this.state.drawerType === \"ADD\"\r\n          ? \"Thêm mới thành công\"\r\n          : \"Cập nhật thành công\",\r\n      description:\r\n        this.state.drawerType === \"ADD\"\r\n          ? \"Dự án bạn vừa tao đã được thêm mới thành công.\"\r\n          : \"Dự án bạn vừa sửa đã được cập nhật thành công.\",\r\n    });\r\n  };\r\n\r\n  showImages = (images) => {\r\n    console.log(images);\r\n  };\r\n\r\n  editProject = (id) => {\r\n    const project = this.props.listSampleProject.find(\r\n      (project) => project._id === id\r\n    );\r\n    const {\r\n      name,\r\n      minimalScale,\r\n      standardUnit,\r\n      estimatedCost,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      estimatedQuantity,\r\n      unitPrice,\r\n      description,\r\n      standardGap,\r\n    } = project;\r\n    this.setState({\r\n      name,\r\n      minimalScale,\r\n      standardUnit,\r\n      estimatedCost,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      estimatedQuantity,\r\n      unitPrice,\r\n      description,\r\n      standardGap,\r\n      editId: id,\r\n      showDrawer: true,\r\n      drawerType: \"EDIT\",\r\n    });\r\n  };\r\n\r\n  deleteProject = (id) => {\r\n    this.props.deleteSampleProject({ id });\r\n  };\r\n\r\n  showAddProject = () => {\r\n    this.setState({\r\n      showDrawer: true,\r\n      drawerType: \"ADD\",\r\n      name: \"\",\r\n      minimalScale: \"\",\r\n      standardUnit: \"\",\r\n      estimatedCost: \"\",\r\n      estimatedTime: \"\",\r\n      estimatedTimeUnit: \"\",\r\n      estimatedQuantity: \"\",\r\n      unitPrice: \"\",\r\n      description: \"\",\r\n      standardGap: [],\r\n    });\r\n  };\r\n\r\n  handleChangeText = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleCreate = () => {\r\n    const {\r\n      name,\r\n      minimalScale,\r\n      standardUnit,\r\n      estimatedCost,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      estimatedQuantity,\r\n      unitPrice,\r\n      description,\r\n      standardGap,\r\n    } = this.state;\r\n    this.props.postSampleProject({\r\n      name,\r\n      minimalScale: Number(minimalScale),\r\n      standardUnit,\r\n      estimatedCost: Number(estimatedCost),\r\n      estimatedTime: Number(estimatedTime),\r\n      estimatedTimeUnit,\r\n      estimatedQuantity: Number(estimatedQuantity),\r\n      unitPrice: Number(unitPrice),\r\n      description,\r\n      standardGap,\r\n    });\r\n    this.openNotificationWithIcon(\"success\");\r\n    this.setState({\r\n      name: \"\",\r\n      minimalScale: \"\",\r\n      standardUnit: \"\",\r\n      estimatedCost: \"\",\r\n      estimatedTime: \"\",\r\n      estimatedTimeUnit: \"\",\r\n      estimatedQuantity: \"\",\r\n      unitPrice: \"\",\r\n      description: \"\",\r\n      standardGap: [],\r\n    });\r\n  };\r\n\r\n  handleEdit = () => {\r\n    const {\r\n      editId,\r\n      name,\r\n      minimalScale,\r\n      standardUnit,\r\n      estimatedCost,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      estimatedQuantity,\r\n      unitPrice,\r\n      description,\r\n      standardGap,\r\n    } = this.state;\r\n    this.props.putSampleProject({\r\n      _id: editId,\r\n      name,\r\n      minimalScale: Number(minimalScale),\r\n      standardUnit,\r\n      estimatedCost: Number(estimatedCost),\r\n      estimatedTime: Number(estimatedTime),\r\n      estimatedTimeUnit,\r\n      estimatedQuantity: Number(estimatedQuantity),\r\n      unitPrice: Number(unitPrice),\r\n      description,\r\n      standardGap,\r\n    });\r\n    this.openNotificationWithIcon(\"success\");\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      name,\r\n      minimalScale,\r\n      standardUnit,\r\n      estimatedCost,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      estimatedQuantity,\r\n      unitPrice,\r\n      description,\r\n      standardGap,\r\n      drawerType,\r\n      columnData,\r\n      showDrawer,\r\n      screenType,\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        {screenType === \"SAMPLE\" ? (\r\n          <Button\r\n            type=\"primary\"\r\n            className=\"add-btn\"\r\n            onClick={this.showAddProject}\r\n            style={{ margin: \"10px\" }}\r\n          >\r\n            Thêm mới dự án\r\n          </Button>\r\n        ) : (\r\n          <h1 style={{ marginLeft: 10 }}>Danh sách dự án</h1>\r\n        )}\r\n        <Table\r\n          dataSource={this.props.listSampleProject}\r\n          columns={columnData}\r\n          pagination={false}\r\n          bordered\r\n          scroll={{ x: \"max-content\" }}\r\n        />\r\n        <Drawer\r\n          title={drawerType === \"ADD\" ? \"Thêm mới dự án\" : \"Sửa dự án\"}\r\n          placement=\"right\"\r\n          closable={true}\r\n          width={720}\r\n          onClose={() => this.setState({ showDrawer: false })}\r\n          visible={showDrawer}\r\n        >\r\n          <Form\r\n            layout=\"vertical\"\r\n            hideRequiredMark\r\n            onFinish={\r\n              drawerType === \"ADD\" ? this.handleCreate : this.handleEdit\r\n            }\r\n          >\r\n            <Row gutter={16}>\r\n              <Col span={12}>\r\n                <Form.Item name=\"name\" label=\"Tên dự án\">\r\n                  {console.log(name)}\r\n                  <Input\r\n                    placeholder=\"Nhập tên dự án\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={12}>\r\n                <Form.Item name=\"standardUnit\" label=\"Đơn vị chuẩn\">\r\n                  {console.log(standardUnit)}\r\n                  <Input\r\n                    placeholder=\"Nhập đơn vị chuẩn\"\r\n                    name=\"standardUnit\"\r\n                    value={standardUnit}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={12}>\r\n                <Form.Item name=\"minimalScale\" label=\"Quy mô tối thiểu\">\r\n                  {console.log(minimalScale)}\r\n                  <Input\r\n                    type=\"number\"\r\n                    placeholder=\"Nhập quy mô tối thiểu\"\r\n                    addonAfter={standardUnit}\r\n                    name=\"minimalScale\"\r\n                    value={minimalScale}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={12}>\r\n                <Form.Item name=\"estimatedCost\" label=\"Chi phí dự toán\">\r\n                  {console.log(estimatedCost)}\r\n                  <Input\r\n                    type=\"number\"\r\n                    placeholder=\"Nhập chi phí dự toán\"\r\n                    addonAfter=\"đồng\"\r\n                    name=\"estimatedCost\"\r\n                    value={estimatedCost}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={12}>\r\n                <Form.Item name=\"estimatedTime\" label=\"Thời gian dự toán\">\r\n                  {console.log(estimatedTime)}\r\n                  <Input\r\n                    type=\"number\"\r\n                    placeholder=\"Nhập thời gian dự toán\"\r\n                    name=\"estimatedTime\"\r\n                    value={estimatedTime}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={12}>\r\n                <Form.Item\r\n                  name=\"estimatedTimeUnit\"\r\n                  label=\"Đơn vị thời gian dự toán\"\r\n                >\r\n                  {console.log(estimatedTimeUnit)}\r\n                  <Select\r\n                    name=\"estimatedTimeUnit\"\r\n                    value={estimatedTimeUnit}\r\n                    onChange={(value) =>\r\n                      this.setState({ estimatedTimeUnit: value })\r\n                    }\r\n                  >\r\n                    <Select.Option value=\"Ngày\">Ngày</Select.Option>\r\n                    <Select.Option value=\"Tháng\">Tháng</Select.Option>\r\n                    <Select.Option value=\"Năm\">Năm</Select.Option>\r\n                  </Select>\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={12}>\r\n                <Form.Item\r\n                  name=\"estimatedQuantity\"\r\n                  label=\"Số lượng sản phẩm dự toán\"\r\n                >\r\n                  {console.log(estimatedQuantity)}\r\n                  <Input\r\n                    type=\"number\"\r\n                    placeholder=\"Nhập số lượng sản phẩm dự toán\"\r\n                    name=\"estimatedQuantity\"\r\n                    value={estimatedQuantity}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={12}>\r\n                <Form.Item name=\"unitPrice\" label=\"Đơn giá\">\r\n                  {console.log(unitPrice)}\r\n                  <Input\r\n                    type=\"number\"\r\n                    placeholder=\"Nhập đơn giá\"\r\n                    addonAfter=\"đồng\"\r\n                    name=\"unitPrice\"\r\n                    value={unitPrice}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                {console.log(standardGap)}\r\n                <Form.Item name=\"standardGap\" label=\"Tiêu chuẩn\">\r\n                  <div className=\"gap\">\r\n                    {standardGap.map((gap, index) => (\r\n                      <Tag\r\n                        key={index}\r\n                        closable\r\n                        onClose={() =>\r\n                          this.setState((prevState) => {\r\n                            return {\r\n                              ...prevState,\r\n                              standardGap: prevState.standardGap.filter(\r\n                                (gap2) => gap2 !== gap\r\n                              ),\r\n                            };\r\n                          })\r\n                        }\r\n                      >\r\n                        {gap}\r\n                      </Tag>\r\n                    ))}\r\n                    <input\r\n                      placeholder=\"Nhập tiêu chuẩn mới\"\r\n                      name=\"newGap\"\r\n                      value={this.state.newGap}\r\n                      onChange={this.handleChangeText}\r\n                    />\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() =>\r\n                        this.setState((prevState) => {\r\n                          return {\r\n                            ...prevState,\r\n                            standardGap: [\r\n                              ...prevState.standardGap,\r\n                              this.state.newGap,\r\n                            ],\r\n                            newGap: \"\",\r\n                          };\r\n                        })\r\n                      }\r\n                    >\r\n                      Add\r\n                    </button>\r\n                  </div>\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item name=\"description\" label=\"Mô tả dự án\">\r\n                  {console.log(description)}\r\n                  <Input.TextArea\r\n                    rows={4}\r\n                    placeholder=\"Nhập mô tả dự án\"\r\n                    name=\"description\"\r\n                    value={description}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              {drawerType === \"ADD\" ? \"Thêm mới\" : \"Cập nhật\"}\r\n            </Button>\r\n          </Form>\r\n        </Drawer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getSampleProject: () => dispatch(getSampleProject()),\r\n  getActualProject: (data) => dispatch(getActualProject(data)),\r\n  postSampleProject: (data) => dispatch(postSampleProject(data)),\r\n  deleteSampleProject: (data) => dispatch(deleteSampleProject(data)),\r\n  putSampleProject: (data) => dispatch(putSampleProject(data)),\r\n  putLockProject: (data) => dispatch(putLockProject(data)),\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n  listSampleProject: state.project.listSampleProject,\r\n  error: state.project.error,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageProject);\r\n","E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-user\\index.js",["178"],"import React, { Component } from \"react\";\r\nimport { notification, Popconfirm, Table } from \"antd\";\r\nimport { getListUser, putLockUser } from \"../../../actions/user\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass ManageUser extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      columnData: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      columnData: [\r\n        {\r\n          title: \"Họ tên\",\r\n          dataIndex: \"fullName\",\r\n        },\r\n        {\r\n          title: \"Kiểu tài khoản\",\r\n          render: (data) => (data.local.email ? \"Local\" : \"Gmail\"),\r\n        },\r\n        {\r\n          title: \"Email\",\r\n          render: (data) =>\r\n            data.local.email ? data.local.email : data.google.email,\r\n        },\r\n        {\r\n          title: \"Địa chỉ\",\r\n          dataIndex: \"address\",\r\n        },\r\n        {\r\n          title: \"Giới tính\",\r\n          render: ({ gender }) => (gender ? \"Nam\" : \"Nữ\"),\r\n        },\r\n        {\r\n          title: \"Dự án\",\r\n          render: ({ _id }) => <Link to={\"/project/\" + _id}>Xem dự án</Link>,\r\n        },\r\n        {\r\n          title: \"Hành động\",\r\n          render: ({ _id, isActive }) => (\r\n            <Popconfirm\r\n              title={`Bạn có chắc chắn muốn ${\r\n                isActive ? \"khóa\" : \"mở\"\r\n              } tài khoản？`}\r\n              okText=\"Có\"\r\n              cancelText=\"Không\"\r\n              onConfirm={() => this.actionUser(_id, !isActive)}\r\n            >\r\n              <a href=\"\">{isActive ? \"Khóa tài khoản\" : \"Mở tài khoản\"}</a>\r\n            </Popconfirm>\r\n          ),\r\n        },\r\n      ],\r\n    });\r\n    this.props.getListUser();\r\n  }\r\n\r\n  openNotificationWithIcon = (type, lock) => {\r\n    notification[type]({\r\n      message: `${lock ? \"Khóa\" : \"Mở\"} tài khoản thành công!`,\r\n      description: `Tài khoản đã được ${lock ? \"khóa\" : \"mở\"} thành công!`,\r\n    });\r\n  };\r\n\r\n  actionUser = (id, isActive) => {\r\n    this.props.putLockUser({ id, isActive });\r\n    this.openNotificationWithIcon(\"success\", !isActive);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Table\r\n          dataSource={this.props.listUser}\r\n          columns={this.state.columnData}\r\n          pagination={false}\r\n          bordered\r\n          scroll={{ x: \"max-content\" }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getListUser: (data) => dispatch(getListUser(data)),\r\n  putLockUser: (data) => dispatch(putLockUser(data)),\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n  listUser: state.user.listUser,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageUser);\r\n","E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\project.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\project.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\project.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-phase\\index.js",["179","180"],"import React, { Component } from \"react\";\r\nimport {\r\n  deletePhase,\r\n  getPhase,\r\n  postPhase,\r\n  putPhase,\r\n} from \"../../../actions/phase\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  Popconfirm,\r\n  Table,\r\n  Button,\r\n  Drawer,\r\n  Input,\r\n  Row,\r\n  Select,\r\n  Form,\r\n  notification,\r\n  Col,\r\n} from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass ManagePhaseScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showDrawer: false,\r\n      drawerType: \"ADD\",\r\n      columnData: [],\r\n      name: \"\",\r\n      description: \"\",\r\n      estimatedTime: \"\",\r\n      estimatedTimeUnit: \"\",\r\n      editId: \"\",\r\n      editable: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const editable = this.props.match?.params?.editable;\r\n    this.setState({ editable: editable === \"1\" });\r\n    this.props.getPhase({ id: this.props.match.params.id_project });\r\n    let columnData = [\r\n      {\r\n        title: \"Tên giai đoạn\",\r\n        dataIndex: \"name\",\r\n      },\r\n      {\r\n        title: \"Mô tả\",\r\n        dataIndex: \"description\",\r\n        width: 500,\r\n      },\r\n      {\r\n        title: \"Thời gian dự toán\",\r\n        dataIndex: \"estimatedTime\",\r\n      },\r\n      {\r\n        title: \"Công việc\",\r\n        render: ({ _id }) => (\r\n          <Link to={\"/task/\" + _id + \"/\" + editable}>Công việc</Link>\r\n        ),\r\n      },\r\n    ];\r\n    if (editable === \"1\") {\r\n      columnData = [\r\n        ...columnData,\r\n        {\r\n          title: \"Sửa\",\r\n          render: ({ _id }) => <a onClick={() => this.editPhase(_id)}>Sửa</a>,\r\n        },\r\n        {\r\n          title: \"Xóa\",\r\n          render: ({ _id }) => (\r\n            <Popconfirm\r\n              title=\"Bạn có chắc chắn muốn xóa？\"\r\n              okText=\"Có\"\r\n              cancelText=\"Không\"\r\n              onConfirm={() => this.deletePhase(_id)}\r\n            >\r\n              <a href=\"\">Xóa</a>\r\n            </Popconfirm>\r\n          ),\r\n        },\r\n      ];\r\n    }\r\n    this.setState({\r\n      columnData,\r\n    });\r\n  }\r\n\r\n  openNotificationWithIcon = (type) => {\r\n    notification[type]({\r\n      message:\r\n        this.state.drawerType === \"ADD\"\r\n          ? \"Thêm mới thành công\"\r\n          : \"Cập nhật thành công\",\r\n      description:\r\n        this.state.drawerType === \"ADD\"\r\n          ? \"Giai đoạn bạn vừa tao đã được thêm mới thành công.\"\r\n          : \"Giai đoạn bạn vừa sửa đã được cập nhật thành công.\",\r\n    });\r\n  };\r\n\r\n  showAddPhase = () => {\r\n    this.setState({\r\n      showDrawer: true,\r\n      drawerType: \"ADD\",\r\n      name: \"\",\r\n      estimatedTime: \"\",\r\n      estimatedTimeUnit: \"\",\r\n      description: \"\",\r\n    });\r\n  };\r\n\r\n  editPhase = (id) => {\r\n    const phase = this.props.listPhase.find((phase) => phase._id === id);\r\n    const { name, estimatedTime, estimatedTimeUnit, description } = phase;\r\n    this.setState({\r\n      name,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      description,\r\n      editId: id,\r\n      showDrawer: true,\r\n      drawerType: \"EDIT\",\r\n    });\r\n  };\r\n\r\n  deletePhase = (id) => {\r\n    this.props.deletePhase({ id });\r\n  };\r\n\r\n  handleChangeText = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleCreate = () => {\r\n    const { name, estimatedTime, estimatedTimeUnit, description } = this.state;\r\n    this.props.postPhase({\r\n      projectId: this.props.match.params.id_project,\r\n      name,\r\n      estimatedTime: Number(estimatedTime),\r\n      estimatedTimeUnit,\r\n      description,\r\n    });\r\n    this.openNotificationWithIcon(\"success\");\r\n    this.setState({\r\n      name: \"\",\r\n      estimatedTime: \"\",\r\n      estimatedTimeUnit: \"\",\r\n      description: \"\",\r\n    });\r\n  };\r\n\r\n  handleEdit = () => {\r\n    const {\r\n      editId,\r\n      name,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      description,\r\n    } = this.state;\r\n    this.props.putPhase({\r\n      _id: editId,\r\n      name,\r\n      estimatedTime: Number(estimatedTime),\r\n      estimatedTimeUnit,\r\n      description,\r\n    });\r\n    this.openNotificationWithIcon(\"success\");\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      showDrawer,\r\n      drawerType,\r\n      columnData,\r\n      name,\r\n      description,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      editable,\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        {editable ? (\r\n          <Button\r\n            type=\"primary\"\r\n            className=\"add-btn\"\r\n            onClick={this.showAddPhase}\r\n            style={{ margin: \"10px\" }}\r\n          >\r\n            Thêm mới giai đoạn\r\n          </Button>\r\n        ) : (\r\n          <h1 style={{ marginLeft: 10 }}>Danh sách giai đoạn</h1>\r\n        )}\r\n        <Table\r\n          dataSource={this.props.listPhase}\r\n          columns={columnData}\r\n          pagination={false}\r\n          bordered\r\n          scroll={{ x: \"max-content\" }}\r\n        />\r\n        <Drawer\r\n          title={drawerType === \"ADD\" ? \"Thêm mới giai đoạn\" : \"Sửa giai đoạn\"}\r\n          placement=\"right\"\r\n          closable={true}\r\n          width={480}\r\n          onClose={() => this.setState({ showDrawer: false })}\r\n          visible={showDrawer}\r\n        >\r\n          <Form\r\n            layout=\"vertical\"\r\n            hideRequiredMark\r\n            onFinish={\r\n              drawerType === \"ADD\" ? this.handleCreate : this.handleEdit\r\n            }\r\n          >\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item name=\"name\" label=\"Tên giai đoạn\">\r\n                  {console.log(name)}\r\n                  <Input\r\n                    placeholder=\"Nhập tên giai đoạn\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item name=\"description\" label=\"Mô tả giai đoạn\">\r\n                  {console.log(description)}\r\n                  <Input.TextArea\r\n                    rows={4}\r\n                    placeholder=\"Nhập mô tả\"\r\n                    name=\"description\"\r\n                    value={description}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item name=\"estimatedTimeUnit\" label=\"Đơn vị thời gian\">\r\n                  {console.log(estimatedTimeUnit)}\r\n                  <Select\r\n                    placeholder=\"Nhập đơn vị thời gian\"\r\n                    name=\"estimatedTimeUnit\"\r\n                    value={estimatedTimeUnit}\r\n                    onChange={(value) =>\r\n                      this.setState({ estimatedTimeUnit: value })\r\n                    }\r\n                  >\r\n                    <Select.Option value=\"Ngày\">Ngày</Select.Option>\r\n                    <Select.Option value=\"Tháng\">Tháng</Select.Option>\r\n                    <Select.Option value=\"Năm\">Năm</Select.Option>\r\n                  </Select>\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item name=\"estimatedTime\" label=\"Thời gian dự toán\">\r\n                  {console.log(estimatedTime)}\r\n                  <Input\r\n                    addonAfter={estimatedTimeUnit}\r\n                    type=\"number\"\r\n                    placeholder=\"Nhập thời gian dự toán\"\r\n                    name=\"estimatedTime\"\r\n                    value={estimatedTime}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              {drawerType === \"ADD\" ? \"Thêm mới\" : \"Cập nhật\"}\r\n            </Button>\r\n          </Form>\r\n        </Drawer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getPhase: (data) => dispatch(getPhase(data)),\r\n  postPhase: (data) => dispatch(postPhase(data)),\r\n  deletePhase: (data) => dispatch(deletePhase(data)),\r\n  putPhase: (data) => dispatch(putPhase(data)),\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n  listPhase: state.phase.listPhase,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManagePhaseScreen);\r\n","E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\phase.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\phase.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\phase.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-task\\index.js",["181","182"],"import React, { Component } from \"react\";\r\nimport { deleteTask, getTask, postTask, putTask } from \"../../../actions/task\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  Popconfirm,\r\n  Table,\r\n  Button,\r\n  Drawer,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Checkbox,\r\n  Select,\r\n  Form,\r\n  notification,\r\n} from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass ManageTaskScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showDrawer: false,\r\n      drawerType: \"ADD\",\r\n      columnData: [],\r\n      name: \"\",\r\n      description: \"\",\r\n      estimatedTime: \"\",\r\n      estimatedTimeUnit: \"\",\r\n      workerNum: \"\",\r\n      workerUnitFee: \"\",\r\n      isDailyTask: false,\r\n      editId: \"\",\r\n      editable: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getTask({ id: this.props.match.params.id_phase });\r\n    const editable = this.props.match?.params?.editable;\r\n    this.setState({ editable: editable === \"1\" });\r\n    let columnData = [\r\n      {\r\n        title: \"Tên công việc\",\r\n        dataIndex: \"name\",\r\n      },\r\n      {\r\n        title: \"Mô tả\",\r\n        dataIndex: \"description\",\r\n        width: 500,\r\n      },\r\n      {\r\n        title: \"Ghi chú\",\r\n        dataIndex: \"note\",\r\n      },\r\n      {\r\n        title: \"Thời gian dự toán\",\r\n        dataIndex: \"estimatedTime\",\r\n      },\r\n      {\r\n        title: \"Đơn vị thời gian\",\r\n        dataIndex: \"estimatedTimeUnit\",\r\n      },\r\n      {\r\n        title: \"Số lượng công nhân\",\r\n        dataIndex: \"workerNum\",\r\n      },\r\n      {\r\n        title: \"Tiền lương công nhân\",\r\n        dataIndex: \"workerUnitFee\",\r\n      },\r\n      {\r\n        title: \"Là công việc hằng ngày\",\r\n        render: ({ isDailyTask }) => (isDailyTask ? \"Có\" : \"Không\"),\r\n      },\r\n      {\r\n        title: \"Vật liệu\",\r\n        render: ({ _id }) => (\r\n          <Link to={\"/material/\" + _id + \"/\" + editable}>Vật liệu</Link>\r\n        ),\r\n      },\r\n      {\r\n        title: \"Đo đạc\",\r\n        render: ({ _id }) => (\r\n          <Link to={\"/measurement/\" + _id + \"/\" + editable}>Đo đạc</Link>\r\n        ),\r\n      },\r\n    ];\r\n    if (editable === \"1\") {\r\n      columnData = [\r\n        ...columnData,\r\n        {\r\n          title: \"Sửa\",\r\n          render: ({ _id }) => <a onClick={() => this.editTask(_id)}>Sửa</a>,\r\n        },\r\n        {\r\n          title: \"Xóa\",\r\n          render: ({ _id }) => (\r\n            <Popconfirm\r\n              title=\"Bạn có chắc chắn muốn xóa？\"\r\n              okText=\"Có\"\r\n              cancelText=\"Không\"\r\n              onConfirm={() => this.deleteTask(_id)}\r\n            >\r\n              <a href=\"\">Xóa</a>\r\n            </Popconfirm>\r\n          ),\r\n        },\r\n      ];\r\n    }\r\n    this.setState({\r\n      columnData,\r\n    });\r\n  }\r\n\r\n  openNotificationWithIcon = (type) => {\r\n    notification[type]({\r\n      message:\r\n        this.state.drawerType === \"ADD\"\r\n          ? \"Thêm mới thành công\"\r\n          : \"Cập nhật thành công\",\r\n      description:\r\n        this.state.drawerType === \"ADD\"\r\n          ? \"Công việc bạn vừa tao đã được thêm mới thành công.\"\r\n          : \"Công việc bạn vừa sửa đã được cập nhật thành công.\",\r\n    });\r\n  };\r\n\r\n  showAddTask = () => {\r\n    this.setState({\r\n      showDrawer: true,\r\n      drawerType: \"ADD\",\r\n      name: \"\",\r\n      estimatedTime: \"\",\r\n      estimatedTimeUnit: \"\",\r\n      description: \"\",\r\n      workerNum: \"\",\r\n      workerUnitFee: \"\",\r\n      isDailyTask: false,\r\n    });\r\n  };\r\n\r\n  editTask = (id) => {\r\n    const task = this.props.listTask.find((task) => task._id === id);\r\n    const {\r\n      name,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      description,\r\n      workerNum,\r\n      workerUnitFee,\r\n      isDailyTask,\r\n    } = task;\r\n    this.setState({\r\n      name,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      description,\r\n      workerNum,\r\n      workerUnitFee,\r\n      isDailyTask,\r\n      editId: id,\r\n      showDrawer: true,\r\n      drawerType: \"EDIT\",\r\n    });\r\n  };\r\n\r\n  deleteTask = (id) => {\r\n    this.props.deleteTask({ id });\r\n  };\r\n\r\n  handleChangeText = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleCreate = () => {\r\n    const {\r\n      name,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      description,\r\n      workerNum,\r\n      workerUnitFee,\r\n      isDailyTask,\r\n    } = this.state;\r\n    this.props.postTask({\r\n      phaseId: this.props.match.params.id_phase,\r\n      name,\r\n      estimatedTime: Number(estimatedTime),\r\n      estimatedTimeUnit,\r\n      description,\r\n      workerNum: Number(workerNum),\r\n      workerUnitFee: Number(workerUnitFee),\r\n      isDailyTask,\r\n    });\r\n    this.openNotificationWithIcon(\"success\");\r\n    this.setState({\r\n      name: \"\",\r\n      estimatedTime: \"\",\r\n      estimatedTimeUnit: \"\",\r\n      description: \"\",\r\n      workerNum: \"\",\r\n      workerUnitFee: \"\",\r\n      isDailyTask: false,\r\n    });\r\n  };\r\n\r\n  handleEdit = () => {\r\n    const {\r\n      editId,\r\n      name,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      description,\r\n      workerNum,\r\n      workerUnitFee,\r\n      isDailyTask,\r\n    } = this.state;\r\n    this.props.putTask({\r\n      _id: editId,\r\n      name,\r\n      estimatedTime: Number(estimatedTime),\r\n      estimatedTimeUnit,\r\n      description,\r\n      workerNum: Number(workerNum),\r\n      workerUnitFee: Number(workerUnitFee),\r\n      isDailyTask,\r\n    });\r\n    this.openNotificationWithIcon(\"success\");\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      showDrawer,\r\n      drawerType,\r\n      columnData,\r\n      name,\r\n      description,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      workerNum,\r\n      workerUnitFee,\r\n      isDailyTask,\r\n      editable,\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        {editable ? (\r\n          <Button\r\n            type=\"primary\"\r\n            className=\"add-btn\"\r\n            onClick={this.showAddTask}\r\n            style={{ margin: \"10px\" }}\r\n          >\r\n            Thêm mới công việc\r\n          </Button>\r\n        ) : (\r\n          <h1 style={{ marginLeft: 10 }}>Danh sách công việc</h1>\r\n        )}\r\n        <Table\r\n          dataSource={this.props.listTask}\r\n          columns={columnData}\r\n          pagination={false}\r\n          bordered\r\n          scroll={{ x: \"max-content\" }}\r\n        />\r\n        <Drawer\r\n          title={drawerType === \"ADD\" ? \"Thêm mới công việc\" : \"Sửa công việc\"}\r\n          placement=\"right\"\r\n          closable={true}\r\n          width={480}\r\n          onClose={() => this.setState({ showDrawer: false })}\r\n          visible={showDrawer}\r\n        >\r\n          <Form\r\n            layout=\"vertical\"\r\n            hideRequiredMark\r\n            onFinish={\r\n              drawerType === \"ADD\" ? this.handleCreate : this.handleEdit\r\n            }\r\n          >\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item name=\"name\" label=\"Tên giai đoạn\">\r\n                  {console.log(name)}\r\n                  <Input\r\n                    placeholder=\"Nhập tên công việc\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item name=\"name\" label=\"Mô tả công việc\">\r\n                  {console.log(description)}\r\n                  <Input.TextArea\r\n                    rows={4}\r\n                    placeholder=\"Nhập mô tả\"\r\n                    name=\"description\"\r\n                    value={description}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item name=\"estimatedTimeUnit\" label=\"Đơn vị thời gian\">\r\n                  {console.log(estimatedTimeUnit)}\r\n                  <Select\r\n                    placeholder=\"Nhập đơn vị thời gian\"\r\n                    name=\"estimatedTimeUnit\"\r\n                    value={estimatedTimeUnit}\r\n                    onChange={(value) =>\r\n                      this.setState({ estimatedTimeUnit: value })\r\n                    }\r\n                  >\r\n                    <Select.Option value=\"Ngày\">Ngày</Select.Option>\r\n                    <Select.Option value=\"Tháng\">Tháng</Select.Option>\r\n                    <Select.Option value=\"Năm\">Năm</Select.Option>\r\n                  </Select>\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item name=\"estimatedTime\" label=\"Thời gian dự toán\">\r\n                  {console.log(estimatedTime)}\r\n                  <Input\r\n                    addonAfter={estimatedTimeUnit}\r\n                    type=\"number\"\r\n                    placeholder=\"Nhập thời gian dự toán\"\r\n                    name=\"estimatedTime\"\r\n                    value={estimatedTime}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item name=\"workerNum\" label=\"Số lượng công nhân\">\r\n                  {console.log(workerNum)}\r\n                  <Input\r\n                    type=\"number\"\r\n                    placeholder=\"Nhập số lượng công nhân\"\r\n                    name=\"workerNum\"\r\n                    value={workerNum}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item name=\"workerUnitFee\" label=\"Lương mỗi công nhân\">\r\n                  {console.log(workerUnitFee)}\r\n                  <Input\r\n                    type=\"number\"\r\n                    placeholder=\"Nhập lương mỗi công nhân\"\r\n                    name=\"workerUnitFee\"\r\n                    value={workerUnitFee}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                {console.log(isDailyTask)}\r\n                <Checkbox\r\n                  checked={isDailyTask}\r\n                  onChange={() =>\r\n                    this.setState({ isDailyTask: !this.state.isDailyTask })\r\n                  }\r\n                >\r\n                  Là công việc hằng ngày\r\n                </Checkbox>\r\n              </Col>\r\n            </Row>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              style={{ marginTop: \"20px\" }}\r\n            >\r\n              {drawerType === \"ADD\" ? \"Thêm mới\" : \"Cập nhật\"}\r\n            </Button>\r\n          </Form>\r\n        </Drawer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getTask: (data) => dispatch(getTask(data)),\r\n  postTask: (data) => dispatch(postTask(data)),\r\n  deleteTask: (data) => dispatch(deleteTask(data)),\r\n  putTask: (data) => dispatch(putTask(data)),\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n  listTask: state.task.listTask,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTaskScreen);\r\n","E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\task.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\measurement.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\task.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\material.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\measurement.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\material.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-material\\index.js",["183","184"],"import React, { Component } from \"react\";\r\nimport {\r\n  deleteMaterial,\r\n  getMaterial,\r\n  postMaterial,\r\n  putMaterial,\r\n} from \"../../../actions/material\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  Popconfirm,\r\n  Table,\r\n  Button,\r\n  Drawer,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Form,\r\n  notification,\r\n} from \"antd\";\r\n\r\nclass ManageMaterialScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showDrawer: false,\r\n      drawerType: \"ADD\",\r\n      columnData: [],\r\n      name: \"\",\r\n      quantity: \"\",\r\n      unit: \"\",\r\n      unitPrice: \"\",\r\n      editId: \"\",\r\n      editable: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getMaterial({ id: this.props.match.params.id_task });\r\n    const editable = this.props.match?.params?.editable;\r\n    this.setState({ editable: editable === \"1\" });\r\n    let columnData = [\r\n      {\r\n        title: \"Tên vật liệu\",\r\n        dataIndex: \"name\",\r\n      },\r\n      {\r\n        title: \"Số lượng\",\r\n        dataIndex: \"quantity\",\r\n      },\r\n      {\r\n        title: \"Đơn vị vật liệu\",\r\n        dataIndex: \"unit\",\r\n      },\r\n      {\r\n        title: \"Đơn giá\",\r\n        dataIndex: \"unitPrice\",\r\n      },\r\n    ];\r\n    if (editable === \"1\") {\r\n      columnData = [\r\n        ...columnData,\r\n        {\r\n          title: \"Sửa\",\r\n          render: ({ _id }) => (\r\n            <a onClick={() => this.editMaterial(_id)}>Sửa</a>\r\n          ),\r\n        },\r\n        {\r\n          title: \"Xóa\",\r\n          render: ({ _id }) => (\r\n            <Popconfirm\r\n              title=\"Bạn có chắc chắn muốn xóa？\"\r\n              okText=\"Có\"\r\n              cancelText=\"Không\"\r\n              onConfirm={() => this.deleteMaterial(_id)}\r\n            >\r\n              <a href=\"\">Xóa</a>\r\n            </Popconfirm>\r\n          ),\r\n        },\r\n      ];\r\n    }\r\n    this.setState({\r\n      columnData,\r\n    });\r\n  }\r\n\r\n  openNotificationWithIcon = (type) => {\r\n    notification[type]({\r\n      message:\r\n        this.state.drawerType === \"ADD\"\r\n          ? \"Thêm mới thành công\"\r\n          : \"Cập nhật thành công\",\r\n      description:\r\n        this.state.drawerType === \"ADD\"\r\n          ? \"Vật liệu bạn vừa tao đã được thêm mới thành công.\"\r\n          : \"Vật liệu bạn vừa sửa đã được cập nhật thành công.\",\r\n    });\r\n  };\r\n\r\n  showAddMaterial = () => {\r\n    this.setState({\r\n      showDrawer: true,\r\n      drawerType: \"ADD\",\r\n      name: \"\",\r\n      quantity: \"\",\r\n      unit: \"\",\r\n      unitPrice: \"\",\r\n    });\r\n  };\r\n\r\n  editMaterial = (id) => {\r\n    const material = this.props.listMaterial.find(\r\n      (material) => material._id === id\r\n    );\r\n    const { name, quantity, unit, unitPrice } = material;\r\n    this.setState({\r\n      name,\r\n      quantity,\r\n      unit,\r\n      unitPrice,\r\n      editId: id,\r\n      showDrawer: true,\r\n      drawerType: \"EDIT\",\r\n    });\r\n  };\r\n\r\n  deleteMaterial = (id) => {\r\n    this.props.deleteMaterial({ id });\r\n  };\r\n\r\n  handleChangeText = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleCreate = () => {\r\n    const { name, quantity, unit, unitPrice } = this.state;\r\n    this.props.postMaterial({\r\n      taskId: this.props.match.params.id_task,\r\n      name,\r\n      quantity: Number(quantity),\r\n      unit,\r\n      unitPrice: Number(unitPrice),\r\n    });\r\n    this.openNotificationWithIcon(\"success\");\r\n    this.setState({\r\n      name: \"\",\r\n      quantity: \"\",\r\n      unit: \"\",\r\n      unitPrice: \"\",\r\n    });\r\n  };\r\n\r\n  handleEdit = () => {\r\n    const { editId, name, quantity, unit, unitPrice } = this.state;\r\n    this.props.putMaterial({\r\n      _id: editId,\r\n      name,\r\n      quantity: Number(quantity),\r\n      unit,\r\n      unitPrice: Number(unitPrice),\r\n    });\r\n    this.openNotificationWithIcon(\"success\");\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      showDrawer,\r\n      drawerType,\r\n      columnData,\r\n      name,\r\n      quantity,\r\n      unit,\r\n      unitPrice,\r\n      editable,\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        {editable ? (\r\n          <Button\r\n            type=\"primary\"\r\n            className=\"add-btn\"\r\n            onClick={this.showAddMaterial}\r\n            style={{ margin: \"10px\" }}\r\n          >\r\n            Thêm mới vật liệu\r\n          </Button>\r\n        ) : (\r\n          <h1 style={{ marginLeft: 10 }}>Danh sách nguyên vật liệu</h1>\r\n        )}\r\n        <Table\r\n          dataSource={this.props.listMaterial}\r\n          columns={columnData}\r\n          pagination={false}\r\n          bordered\r\n          scroll={{ x: \"max-content\" }}\r\n        />\r\n        <Drawer\r\n          title={drawerType === \"ADD\" ? \"Thêm mới vật liệu\" : \"Sửa vật liệu\"}\r\n          placement=\"right\"\r\n          closable={true}\r\n          width={300}\r\n          onClose={() => this.setState({ showDrawer: false })}\r\n          visible={showDrawer}\r\n        >\r\n          <Form\r\n            layout=\"vertical\"\r\n            hideRequiredMark\r\n            onFinish={\r\n              drawerType === \"ADD\" ? this.handleCreate : this.handleEdit\r\n            }\r\n          >\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item name=\"name\" label=\"Tên vật liệu\">\r\n                  {console.log(name)}\r\n                  <Input\r\n                    placeholder=\"Nhập tên vật liệu\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item name=\"quantity\" label=\"Số lượng\">\r\n                  {console.log(quantity)}\r\n                  <Input\r\n                    placeholder=\"Nhập số lượng\"\r\n                    type=\"number\"\r\n                    name=\"quantity\"\r\n                    value={quantity}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item name=\"unit\" label=\"Đơn vị vật liệu\">\r\n                  {console.log(unit)}\r\n                  <Input\r\n                    placeholder=\"Nhập đơn vị vật liệu\"\r\n                    name=\"unit\"\r\n                    value={unit}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item name=\"unitPrice\" label=\"Đơn giá vật liệu\">\r\n                  {console.log(unitPrice)}\r\n                  <Input\r\n                    placeholder=\"Nhập đơn giá\"\r\n                    addonAfter={unit}\r\n                    type=\"number\"\r\n                    name=\"unitPrice\"\r\n                    value={unitPrice}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              {drawerType === \"ADD\" ? \"Thêm mới\" : \"Cập nhật\"}\r\n            </Button>\r\n          </Form>\r\n        </Drawer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getMaterial: (data) => dispatch(getMaterial(data)),\r\n  postMaterial: (data) => dispatch(postMaterial(data)),\r\n  deleteMaterial: (data) => dispatch(deleteMaterial(data)),\r\n  putMaterial: (data) => dispatch(putMaterial(data)),\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n  listMaterial: state.material.listMaterial,\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ManageMaterialScreen);\r\n","E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-measurement\\index.js",["185","186"],"import React, { Component } from \"react\";\r\nimport {\r\n  deleteMeasurement,\r\n  getMeasurement,\r\n  postMeasurement,\r\n  putMeasurement,\r\n} from \"../../../actions/measurement\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  Popconfirm,\r\n  Table,\r\n  Button,\r\n  Drawer,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Form,\r\n  notification,\r\n} from \"antd\";\r\n\r\nclass ManageMeasurementScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showDrawer: false,\r\n      drawerType: \"ADD\",\r\n      columnData: [],\r\n      name: \"\",\r\n      guide: \"\",\r\n      standardNum: \"\",\r\n      unit: \"\",\r\n      editId: \"\",\r\n      editable: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getMeasurement({ id: this.props.match.params.id_task });\r\n    const editable = this.props.match?.params?.editable;\r\n    this.setState({ editable: editable === \"1\" });\r\n    let columnData = [\r\n      {\r\n        title: \"Tên số liệu đo đạc\",\r\n        dataIndex: \"name\",\r\n      },\r\n      {\r\n        title: \"Hướng dẫn đo\",\r\n        dataIndex: \"guide\",\r\n      },\r\n      {\r\n        title: \"Số liệu chuẩn\",\r\n        dataIndex: \"standardNum\",\r\n      },\r\n      {\r\n        title: \"Đơn vị đo\",\r\n        dataIndex: \"unit\",\r\n      },\r\n    ];\r\n    if (editable === \"1\") {\r\n      columnData = [\r\n        ...columnData,\r\n        {\r\n          title: \"Sửa\",\r\n          render: ({ _id }) => (\r\n            <a onClick={() => this.editMeasurement(_id)}>Sửa</a>\r\n          ),\r\n        },\r\n        {\r\n          title: \"Xóa\",\r\n          render: ({ _id }) => (\r\n            <Popconfirm\r\n              title=\"Bạn có chắc chắn muốn xóa？\"\r\n              okText=\"Có\"\r\n              cancelText=\"Không\"\r\n              onConfirm={() => this.deleteMeasurement(_id)}\r\n            >\r\n              <a href=\"\">Xóa</a>\r\n            </Popconfirm>\r\n          ),\r\n        },\r\n      ];\r\n    }\r\n    this.setState({\r\n      columnData,\r\n    });\r\n  }\r\n\r\n  openNotificationWithIcon = (type) => {\r\n    notification[type]({\r\n      message:\r\n        this.state.drawerType === \"ADD\"\r\n          ? \"Thêm mới thành công\"\r\n          : \"Cập nhật thành công\",\r\n      description:\r\n        this.state.drawerType === \"ADD\"\r\n          ? \"Số liệu đo đạc bạn vừa tao đã được thêm mới thành công.\"\r\n          : \"Số liệu đo đạc bạn vừa sửa đã được cập nhật thành công.\",\r\n    });\r\n  };\r\n\r\n  showAddMeasurement = () => {\r\n    this.setState({\r\n      showDrawer: true,\r\n      drawerType: \"ADD\",\r\n      name: \"\",\r\n      guide: \"\",\r\n      standardNum: \"\",\r\n      unit: \"\",\r\n    });\r\n  };\r\n\r\n  editMeasurement = (id) => {\r\n    const measurement = this.props.listMeasurement.find(\r\n      (measurement) => measurement._id === id\r\n    );\r\n    const { name, guide, standardNum, unit } = measurement;\r\n    this.setState({\r\n      name,\r\n      guide,\r\n      standardNum,\r\n      unit,\r\n      editId: id,\r\n      showDrawer: true,\r\n      drawerType: \"EDIT\",\r\n    });\r\n  };\r\n\r\n  deleteMeasurement = (id) => {\r\n    this.props.deleteMeasurement({ id });\r\n  };\r\n\r\n  handleChangeText = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleCreate = () => {\r\n    const { name, guide, standardNum, unit } = this.state;\r\n    this.props.postMeasurement({\r\n      taskId: this.props.match.params.id_task,\r\n      name,\r\n      guide,\r\n      standardNum: Number(standardNum),\r\n      unit,\r\n    });\r\n    this.openNotificationWithIcon(\"success\");\r\n    this.setState({\r\n      name: \"\",\r\n      guide: \"\",\r\n      standardNum: \"\",\r\n      unit: \"\",\r\n    });\r\n  };\r\n\r\n  handleEdit = () => {\r\n    const { editId, name, guide, standardNum, unit } = this.state;\r\n    this.props.putMeasurement({\r\n      _id: editId,\r\n      name,\r\n      guide,\r\n      standardNum: Number(standardNum),\r\n      unit,\r\n    });\r\n    this.openNotificationWithIcon(\"success\");\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      showDrawer,\r\n      drawerType,\r\n      columnData,\r\n      name,\r\n      guide,\r\n      standardNum,\r\n      unit,\r\n      editable,\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        {editable ? (\r\n          <Button\r\n            type=\"primary\"\r\n            className=\"add-btn\"\r\n            onClick={this.showAddMeasurement}\r\n            style={{ margin: \"10px\" }}\r\n          >\r\n            Thêm mới số liệu đo đạc\r\n          </Button>\r\n        ) : (\r\n          <h1 style={{ marginLeft: 10 }}>Danh sách số liệu đo đạc</h1>\r\n        )}\r\n        <Table\r\n          dataSource={this.props.listMeasurement}\r\n          columns={columnData}\r\n          pagination={false}\r\n          bordered\r\n          scroll={{ x: \"max-content\" }}\r\n        />\r\n        <Drawer\r\n          title={\r\n            drawerType === \"ADD\"\r\n              ? \"Thêm mới số liệu đo đạc\"\r\n              : \"Sửa số liệu đo đạc\"\r\n          }\r\n          placement=\"right\"\r\n          closable={true}\r\n          width={480}\r\n          onClose={() => this.setState({ showDrawer: false })}\r\n          visible={showDrawer}\r\n        >\r\n          <Form\r\n            layout=\"vertical\"\r\n            hideRequiredMark\r\n            onFinish={\r\n              drawerType === \"ADD\" ? this.handleCreate : this.handleEdit\r\n            }\r\n          >\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item name=\"name\" label=\"Số liệu đo đạc\">\r\n                  {console.log(name)}\r\n                  <Input\r\n                    placeholder=\"Nhập tên số liệu đo đạc\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item name=\"guide\" label=\"Hướng dẫn đo\">\r\n                  {console.log(guide)}\r\n                  <Input\r\n                    placeholder=\"Nhập hướng dẫn đo\"\r\n                    name=\"guide\"\r\n                    value={guide}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item name=\"unit\" label=\"Đơn vị đo\">\r\n                  {console.log(unit)}\r\n                  <Input\r\n                    placeholder=\"Nhập đơn vị đo\"\r\n                    name=\"unit\"\r\n                    value={unit}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item name=\"standardNum\" label=\"Số liệu chuẩn\">\r\n                  {console.log(standardNum)}\r\n                  <Input\r\n                    addonAfter={unit}\r\n                    placeholder=\"Nhập số liệu chuẩn\"\r\n                    name=\"standardNum\"\r\n                    value={standardNum}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              {drawerType === \"ADD\" ? \"Thêm mới\" : \"Cập nhật\"}\r\n            </Button>\r\n          </Form>\r\n        </Drawer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getMeasurement: (data) => dispatch(getMeasurement(data)),\r\n  postMeasurement: (data) => dispatch(postMeasurement(data)),\r\n  deleteMeasurement: (data) => dispatch(deleteMeasurement(data)),\r\n  putMeasurement: (data) => dispatch(putMeasurement(data)),\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n  listMeasurement: state.measurement.listMeasurement,\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ManageMeasurementScreen);\r\n","E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\task.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\material.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\measurement.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\user.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\user.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\user.js",[],{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"187","replacedBy":"191"},{"ruleId":"189","replacedBy":"192"},{"ruleId":"193","severity":1,"message":"194","line":99,"column":11,"nodeType":"195","endLine":99,"endColumn":62},{"ruleId":"193","severity":1,"message":"194","line":126,"column":19,"nodeType":"195","endLine":126,"endColumn":30},{"ruleId":"193","severity":1,"message":"196","line":136,"column":17,"nodeType":"195","endLine":136,"endColumn":58},{"ruleId":"193","severity":1,"message":"194","line":148,"column":19,"nodeType":"195","endLine":148,"endColumn":30},{"ruleId":"193","severity":1,"message":"194","line":54,"column":15,"nodeType":"195","endLine":54,"endColumn":26},{"ruleId":"193","severity":1,"message":"196","line":69,"column":32,"nodeType":"195","endLine":69,"endColumn":71},{"ruleId":"193","severity":1,"message":"194","line":80,"column":15,"nodeType":"195","endLine":80,"endColumn":26},{"ruleId":"193","severity":1,"message":"196","line":94,"column":32,"nodeType":"195","endLine":94,"endColumn":70},{"ruleId":"193","severity":1,"message":"194","line":105,"column":15,"nodeType":"195","endLine":105,"endColumn":26},{"ruleId":"193","severity":1,"message":"196","line":65,"column":13,"nodeType":"195","endLine":65,"endColumn":55},{"ruleId":"193","severity":1,"message":"194","line":77,"column":15,"nodeType":"195","endLine":77,"endColumn":26},{"ruleId":"193","severity":1,"message":"196","line":65,"column":13,"nodeType":"195","endLine":65,"endColumn":58},{"ruleId":"193","severity":1,"message":"194","line":77,"column":15,"nodeType":"195","endLine":77,"endColumn":26},"no-native-reassign",["197"],"no-negated-in-lhs",["198"],["197"],["198"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]