[{"E:\\Visual Studio Code\\agriculture-manager\\src\\index.js":"1","E:\\Visual Studio Code\\agriculture-manager\\src\\App.js":"2","E:\\Visual Studio Code\\agriculture-manager\\src\\components\\header\\index.js":"3","E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\index.js":"4","E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\auth.js":"5","E:\\Visual Studio Code\\agriculture-manager\\src\\constants\\apiUrl.js":"6","E:\\Visual Studio Code\\agriculture-manager\\src\\utils\\setAuthorizationToken.js":"7","E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\auth.js":"8","E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\index.js":"9","E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\auth.js":"10","E:\\Visual Studio Code\\agriculture-manager\\src\\constants\\errorMessages.js":"11","E:\\Visual Studio Code\\agriculture-manager\\src\\constants\\ActionTypes.js":"12","E:\\Visual Studio Code\\agriculture-manager\\src\\constants\\routePath.js":"13","E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\login\\index.js":"14","E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\index.js":"15","E:\\Visual Studio Code\\agriculture-manager\\src\\routes\\privateRoute.js":"16","E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-project\\index.js":"17","E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-user\\index.js":"18","E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\project.js":"19","E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\project.js":"20","E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\project.js":"21","E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-phase\\index.js":"22","E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\phase.js":"23","E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\phase.js":"24","E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\phase.js":"25","E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-task\\index.js":"26","E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\task.js":"27","E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\measurement.js":"28","E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\task.js":"29","E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\material.js":"30","E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\measurement.js":"31","E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\material.js":"32","E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-material\\index.js":"33","E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-measurement\\index.js":"34","E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\task.js":"35","E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\material.js":"36","E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\measurement.js":"37"},{"size":729,"mtime":1607304454346,"results":"38","hashOfConfig":"39"},{"size":2315,"mtime":1607530125021,"results":"40","hashOfConfig":"39"},{"size":1901,"mtime":1607311681005,"results":"41","hashOfConfig":"39"},{"size":496,"mtime":1607526619709,"results":"42","hashOfConfig":"39"},{"size":1383,"mtime":1607311541268,"results":"43","hashOfConfig":"39"},{"size":1185,"mtime":1607525912338,"results":"44","hashOfConfig":"39"},{"size":255,"mtime":1607303573390,"results":"45","hashOfConfig":"39"},{"size":851,"mtime":1607311528080,"results":"46","hashOfConfig":"39"},{"size":383,"mtime":1607527915549,"results":"47","hashOfConfig":"39"},{"size":1055,"mtime":1607311642161,"results":"48","hashOfConfig":"39"},{"size":70,"mtime":1607304334504,"results":"49","hashOfConfig":"39"},{"size":3826,"mtime":1607525955941,"results":"50","hashOfConfig":"39"},{"size":78,"mtime":1607305009342,"results":"51","hashOfConfig":"39"},{"size":2500,"mtime":1607311733060,"results":"52","hashOfConfig":"39"},{"size":1057,"mtime":1607313886623,"results":"53","hashOfConfig":"39"},{"size":664,"mtime":1607305917393,"results":"54","hashOfConfig":"39"},{"size":15364,"mtime":1607523802720,"results":"55","hashOfConfig":"39"},{"size":224,"mtime":1607313877055,"results":"56","hashOfConfig":"39"},{"size":2849,"mtime":1607519351177,"results":"57","hashOfConfig":"39"},{"size":1896,"mtime":1607351862329,"results":"58","hashOfConfig":"39"},{"size":2597,"mtime":1607436856246,"results":"59","hashOfConfig":"39"},{"size":7178,"mtime":1607524779306,"results":"60","hashOfConfig":"39"},{"size":2530,"mtime":1607524447198,"results":"61","hashOfConfig":"39"},{"size":1692,"mtime":1607519212978,"results":"62","hashOfConfig":"39"},{"size":1959,"mtime":1607524490927,"results":"63","hashOfConfig":"39"},{"size":9588,"mtime":1607528833219,"results":"64","hashOfConfig":"39"},{"size":1668,"mtime":1607525803023,"results":"65","hashOfConfig":"39"},{"size":2812,"mtime":1607526590677,"results":"66","hashOfConfig":"39"},{"size":2483,"mtime":1607526332994,"results":"67","hashOfConfig":"39"},{"size":2671,"mtime":1607526494774,"results":"68","hashOfConfig":"39"},{"size":1836,"mtime":1607526647360,"results":"69","hashOfConfig":"39"},{"size":1764,"mtime":1607526091807,"results":"70","hashOfConfig":"39"},{"size":6590,"mtime":1607530378137,"results":"71","hashOfConfig":"39"},{"size":6696,"mtime":1607531346390,"results":"72","hashOfConfig":"39"},{"size":1945,"mtime":1607527081545,"results":"73","hashOfConfig":"39"},{"size":1948,"mtime":1607530276161,"results":"74","hashOfConfig":"39"},{"size":2060,"mtime":1607530947426,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1umqjlh",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"78"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"78"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"E:\\Visual Studio Code\\agriculture-manager\\src\\index.js",[],["155","156"],"E:\\Visual Studio Code\\agriculture-manager\\src\\App.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\components\\header\\index.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\index.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\auth.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\constants\\apiUrl.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\utils\\setAuthorizationToken.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\auth.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\index.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\auth.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\constants\\errorMessages.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\constants\\ActionTypes.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\constants\\routePath.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\login\\index.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\index.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\routes\\privateRoute.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-project\\index.js",["157","158","159"],"import React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  Col,\r\n  Drawer,\r\n  Form,\r\n  Input,\r\n  Popconfirm,\r\n  Row,\r\n  Select,\r\n  Table,\r\n  Tag,\r\n  notification,\r\n} from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getSampleProject,\r\n  postSampleProject,\r\n  deleteSampleProject,\r\n  putSampleProject,\r\n} from \"../../../actions/project\";\r\nimport \"./style.scss\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass ManageProject extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showDrawer: false,\r\n      drawerType: \"ADD\",\r\n      columnData: [],\r\n      name: \"\",\r\n      minimalScale: 0,\r\n      standardUnit: \"\",\r\n      estimatedCost: 0,\r\n      estimatedTime: 0,\r\n      estimatedTimeUnit: \"\",\r\n      estimatedQuantity: 0,\r\n      unitPrice: 0,\r\n      description: \"\",\r\n      editId: \"\",\r\n      standardGap: [],\r\n      newGap: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      columnData: [\r\n        {\r\n          title: \"Tên dự án\",\r\n          dataIndex: \"name\",\r\n        },\r\n        {\r\n          title: \"Mô tả\",\r\n          dataIndex: \"description\",\r\n          width: 500,\r\n        },\r\n        {\r\n          title: \"Tiêu chuẩn\",\r\n          render: (data) => data.standardGap.join(\", \"),\r\n        },\r\n        {\r\n          title: \"Quy mô tối thiểu\",\r\n          dataIndex: \"minimalScale\",\r\n        },\r\n        {\r\n          title: \"Đơn vị chuẩn\",\r\n          dataIndex: \"standardUnit\",\r\n        },\r\n        {\r\n          title: \"Chi phí dự toán\",\r\n          dataIndex: \"estimatedCost\",\r\n        },\r\n        {\r\n          title: \"Đon vị thời gian\",\r\n          dataIndex: \"estimatedTimeUnit\",\r\n        },\r\n        {\r\n          title: \"Sản lượng dự toán\",\r\n          dataIndex: \"estimatedQuantity\",\r\n        },\r\n        {\r\n          title: \"Đơn giá\",\r\n          dataIndex: \"unitPrice\",\r\n        },\r\n        {\r\n          title: \"Hình ảnh\",\r\n          render: ({ images }) => (\r\n            <a href=\"\" onClick={() => this.showImages(images)}>\r\n              Hình ảnh\r\n            </a>\r\n          ),\r\n        },\r\n        {\r\n          title: \"Giai đoạn\",\r\n          render: ({ _id }) => <Link to={\"/phase/\" + _id}>Giai đoạn</Link>,\r\n        },\r\n        {\r\n          title: \"Sửa\",\r\n          render: ({ _id }) => <a onClick={() => this.editProject(_id)}>Sửa</a>,\r\n        },\r\n        {\r\n          title: \"Xóa\",\r\n          render: ({ _id }) => (\r\n            <Popconfirm\r\n              title=\"Bạn có chắc chắn muốn xóa？\"\r\n              okText=\"Có\"\r\n              cancelText=\"Không\"\r\n              onConfirm={() => this.deleteProject(_id)}\r\n            >\r\n              <a href=\"\">Xóa</a>\r\n            </Popconfirm>\r\n          ),\r\n        },\r\n      ],\r\n    });\r\n    this.props.getSampleProject();\r\n  }\r\n\r\n  goToPhaseScreen = (e, projectId) => {\r\n    e.preventDefault();\r\n    this.props.history.push(\"/phase/\" + projectId);\r\n  };\r\n\r\n  openNotificationWithIcon = (type) => {\r\n    notification[type]({\r\n      message:\r\n        this.state.drawerType === \"ADD\"\r\n          ? \"Thêm mới thành công\"\r\n          : \"Cập nhật thành công\",\r\n      description:\r\n        this.state.drawerType === \"ADD\"\r\n          ? \"Dự án bạn vừa tao đã được thêm mới thành công.\"\r\n          : \"Dự án bạn vừa sửa đã được cập nhật thành công.\",\r\n    });\r\n  };\r\n\r\n  showImages = (images) => {\r\n    console.log(images);\r\n  };\r\n\r\n  editProject = (id) => {\r\n    const project = this.props.listSampleProject.find(\r\n      (project) => project._id === id\r\n    );\r\n    const {\r\n      name,\r\n      minimalScale,\r\n      standardUnit,\r\n      estimatedCost,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      estimatedQuantity,\r\n      unitPrice,\r\n      description,\r\n      standardGap,\r\n    } = project;\r\n    this.setState({\r\n      name,\r\n      minimalScale,\r\n      standardUnit,\r\n      estimatedCost,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      estimatedQuantity,\r\n      unitPrice,\r\n      description,\r\n      standardGap,\r\n      editId: id,\r\n      showDrawer: true,\r\n      drawerType: \"EDIT\",\r\n    });\r\n  };\r\n\r\n  deleteProject = (id) => {\r\n    this.props.deleteSampleProject({ id });\r\n  };\r\n\r\n  showAddProject = () => {\r\n    this.setState({\r\n      showDrawer: true,\r\n      drawerType: \"ADD\",\r\n      name: \"\",\r\n      minimalScale: \"\",\r\n      standardUnit: \"\",\r\n      estimatedCost: \"\",\r\n      estimatedTime: \"\",\r\n      estimatedTimeUnit: \"\",\r\n      estimatedQuantity: \"\",\r\n      unitPrice: \"\",\r\n      description: \"\",\r\n      standardGap: [],\r\n    });\r\n  };\r\n\r\n  handleChangeText = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleCreate = () => {\r\n    const {\r\n      name,\r\n      minimalScale,\r\n      standardUnit,\r\n      estimatedCost,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      estimatedQuantity,\r\n      unitPrice,\r\n      description,\r\n      standardGap,\r\n    } = this.state;\r\n    this.props.postSampleProject({\r\n      name,\r\n      minimalScale: Number(minimalScale),\r\n      standardUnit,\r\n      estimatedCost: Number(estimatedCost),\r\n      estimatedTime: Number(estimatedTime),\r\n      estimatedTimeUnit,\r\n      estimatedQuantity: Number(estimatedQuantity),\r\n      unitPrice: Number(unitPrice),\r\n      description,\r\n      standardGap,\r\n    });\r\n    this.openNotificationWithIcon(\"success\");\r\n    this.setState({\r\n      name: \"\",\r\n      minimalScale: \"\",\r\n      standardUnit: \"\",\r\n      estimatedCost: \"\",\r\n      estimatedTime: \"\",\r\n      estimatedTimeUnit: \"\",\r\n      estimatedQuantity: \"\",\r\n      unitPrice: \"\",\r\n      description: \"\",\r\n      standardGap: [],\r\n    });\r\n  };\r\n\r\n  handleEdit = () => {\r\n    const {\r\n      editId,\r\n      name,\r\n      minimalScale,\r\n      standardUnit,\r\n      estimatedCost,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      estimatedQuantity,\r\n      unitPrice,\r\n      description,\r\n      standardGap,\r\n    } = this.state;\r\n    this.props.putSampleProject({\r\n      _id: editId,\r\n      name,\r\n      minimalScale: Number(minimalScale),\r\n      standardUnit,\r\n      estimatedCost: Number(estimatedCost),\r\n      estimatedTime: Number(estimatedTime),\r\n      estimatedTimeUnit,\r\n      estimatedQuantity: Number(estimatedQuantity),\r\n      unitPrice: Number(unitPrice),\r\n      description,\r\n      standardGap,\r\n    });\r\n    this.openNotificationWithIcon(\"success\");\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      name,\r\n      minimalScale,\r\n      standardUnit,\r\n      estimatedCost,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      estimatedQuantity,\r\n      unitPrice,\r\n      description,\r\n      standardGap,\r\n      drawerType,\r\n      columnData,\r\n      showDrawer,\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        <Button\r\n          type=\"primary\"\r\n          className=\"add-btn\"\r\n          onClick={this.showAddProject}\r\n        >\r\n          Thêm mới dự án\r\n        </Button>\r\n        <Table\r\n          dataSource={this.props.listSampleProject}\r\n          columns={columnData}\r\n          pagination={false}\r\n          bordered\r\n          scroll={{ x: \"max-content\" }}\r\n        />\r\n        <Drawer\r\n          title={drawerType === \"ADD\" ? \"Thêm mới dự án\" : \"Sửa dự án\"}\r\n          placement=\"right\"\r\n          closable={true}\r\n          width={720}\r\n          onClose={() => this.setState({ showDrawer: false })}\r\n          visible={showDrawer}\r\n        >\r\n          <Form\r\n            layout=\"vertical\"\r\n            hideRequiredMark\r\n            onFinish={\r\n              drawerType === \"ADD\" ? this.handleCreate : this.handleEdit\r\n            }\r\n          >\r\n            <Row gutter={16}>\r\n              <Col span={12}>\r\n                <Form.Item name=\"name\" label=\"Tên dự án\">\r\n                  {console.log(name)}\r\n                  <Input\r\n                    placeholder=\"Nhập tên dự án\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={12}>\r\n                <Form.Item name=\"standardUnit\" label=\"Đơn vị chuẩn\">\r\n                  {console.log(standardUnit)}\r\n                  <Input\r\n                    placeholder=\"Nhập đơn vị chuẩn\"\r\n                    name=\"standardUnit\"\r\n                    value={standardUnit}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={12}>\r\n                <Form.Item name=\"minimalScale\" label=\"Quy mô tối thiểu\">\r\n                  {console.log(minimalScale)}\r\n                  <Input\r\n                    type=\"number\"\r\n                    placeholder=\"Nhập quy mô tối thiểu\"\r\n                    addonAfter={standardUnit}\r\n                    name=\"minimalScale\"\r\n                    value={minimalScale}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={12}>\r\n                <Form.Item name=\"estimatedCost\" label=\"Chi phí dự toán\">\r\n                  {console.log(estimatedCost)}\r\n                  <Input\r\n                    type=\"number\"\r\n                    placeholder=\"Nhập chi phí dự toán\"\r\n                    addonAfter=\"đồng\"\r\n                    name=\"estimatedCost\"\r\n                    value={estimatedCost}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={12}>\r\n                <Form.Item name=\"estimatedTime\" label=\"Thời gian dự toán\">\r\n                  {console.log(estimatedTime)}\r\n                  <Input\r\n                    type=\"number\"\r\n                    placeholder=\"Nhập thời gian dự toán\"\r\n                    name=\"estimatedTime\"\r\n                    value={estimatedTime}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={12}>\r\n                <Form.Item\r\n                  name=\"estimatedTimeUnit\"\r\n                  label=\"Đơn vị thời gian dự toán\"\r\n                >\r\n                  {console.log(estimatedTimeUnit)}\r\n                  <Select\r\n                    name=\"estimatedTimeUnit\"\r\n                    value={estimatedTimeUnit}\r\n                    onChange={(value) =>\r\n                      this.setState({ estimatedTimeUnit: value })\r\n                    }\r\n                  >\r\n                    <Select.Option value=\"Ngày\">Ngày</Select.Option>\r\n                    <Select.Option value=\"Tháng\">Tháng</Select.Option>\r\n                    <Select.Option value=\"Năm\">Năm</Select.Option>\r\n                  </Select>\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={12}>\r\n                <Form.Item\r\n                  name=\"estimatedQuantity\"\r\n                  label=\"Số lượng sản phẩm dự toán\"\r\n                >\r\n                  {console.log(estimatedQuantity)}\r\n                  <Input\r\n                    type=\"number\"\r\n                    placeholder=\"Nhập số lượng sản phẩm dự toán\"\r\n                    name=\"estimatedQuantity\"\r\n                    value={estimatedQuantity}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={12}>\r\n                <Form.Item name=\"unitPrice\" label=\"Đơn giá\">\r\n                  {console.log(unitPrice)}\r\n                  <Input\r\n                    type=\"number\"\r\n                    placeholder=\"Nhập đơn giá\"\r\n                    addonAfter=\"đồng\"\r\n                    name=\"unitPrice\"\r\n                    value={unitPrice}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                {console.log(standardGap)}\r\n                <Form.Item name=\"standardGap\" label=\"Tiêu chuẩn\">\r\n                  <div className=\"gap\">\r\n                    {standardGap.map((gap, index) => (\r\n                      <Tag\r\n                        key={index}\r\n                        closable\r\n                        onClose={() =>\r\n                          this.setState((prevState) => {\r\n                            return {\r\n                              ...prevState,\r\n                              standardGap: prevState.standardGap.filter(\r\n                                (gap2) => gap2 !== gap\r\n                              ),\r\n                            };\r\n                          })\r\n                        }\r\n                      >\r\n                        {gap}\r\n                      </Tag>\r\n                    ))}\r\n                    <input\r\n                      placeholder=\"Nhập tiêu chuẩn mới\"\r\n                      name=\"newGap\"\r\n                      value={this.state.newGap}\r\n                      onChange={this.handleChangeText}\r\n                    />\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() =>\r\n                        this.setState((prevState) => {\r\n                          return {\r\n                            ...prevState,\r\n                            standardGap: [\r\n                              ...prevState.standardGap,\r\n                              this.state.newGap,\r\n                            ],\r\n                            newGap: \"\",\r\n                          };\r\n                        })\r\n                      }\r\n                    >\r\n                      Add\r\n                    </button>\r\n                  </div>\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Col span={24}>\r\n                <Form.Item name=\"description\" label=\"Mô tả dự án\">\r\n                  {console.log(description)}\r\n                  <Input.TextArea\r\n                    rows={4}\r\n                    placeholder=\"Nhập mô tả dự án\"\r\n                    name=\"description\"\r\n                    value={description}\r\n                    onChange={this.handleChangeText}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              {drawerType === \"ADD\" ? \"Thêm mới\" : \"Cập nhật\"}\r\n            </Button>\r\n          </Form>\r\n        </Drawer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getSampleProject: () => dispatch(getSampleProject()),\r\n  postSampleProject: (data) => dispatch(postSampleProject(data)),\r\n  deleteSampleProject: (data) => dispatch(deleteSampleProject(data)),\r\n  putSampleProject: (data) => dispatch(putSampleProject(data)),\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n  listSampleProject: state.project.listSampleProject,\r\n  error: state.project.error,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageProject);\r\n","E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-user\\index.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\project.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\project.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\project.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-phase\\index.js",["160","161"],"import React, { Component } from \"react\";\r\nimport {\r\n  deletePhase,\r\n  getPhase,\r\n  postPhase,\r\n  putPhase,\r\n} from \"../../../actions/phase\";\r\nimport \"./style.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { Popconfirm, Table, Button, Drawer, Input, Row, Select, notification } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Form from \"antd/lib/form/Form\";\r\n\r\nclass ManagePhaseScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showDrawer: false,\r\n      drawerType: \"ADD\",\r\n      columnData: [],\r\n      name: \"\",\r\n      description: \"\",\r\n      estimatedTime: \"\",\r\n      estimatedTimeUnit: \"\",\r\n      editId: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getPhase({ id: this.props.match.params.id_project });\r\n    this.setState({\r\n      columnData: [\r\n        {\r\n          title: \"Tên giai đoạn\",\r\n          dataIndex: \"name\",\r\n        },\r\n        {\r\n          title: \"Mô tả\",\r\n          dataIndex: \"description\",\r\n          width: 500,\r\n        },\r\n        {\r\n          title: \"Thời gian dự toán\",\r\n          dataIndex: \"estimatedTime\",\r\n        },\r\n        {\r\n          title: \"Công việc\",\r\n          render: ({ _id }) => <Link to={\"/task/\" + _id}>Công việc</Link>,\r\n        },\r\n        {\r\n          title: \"Sửa\",\r\n          render: ({ _id }) => <a onClick={() => this.editPhase(_id)}>Sửa</a>,\r\n        },\r\n        {\r\n          title: \"Xóa\",\r\n          render: ({ _id }) => (\r\n            <Popconfirm\r\n              title=\"Bạn có chắc chắn muốn xóa？\"\r\n              okText=\"Có\"\r\n              cancelText=\"Không\"\r\n              onConfirm={() => this.deletePhase(_id)}\r\n            >\r\n              <a href=\"\">Xóa</a>\r\n            </Popconfirm>\r\n          ),\r\n        },\r\n      ],\r\n    });\r\n  }\r\n\r\n  openNotificationWithIcon = (type) => {\r\n    notification[type]({\r\n      message:\r\n        this.state.drawerType === \"ADD\"\r\n          ? \"Thêm mới thành công\"\r\n          : \"Cập nhật thành công\",\r\n      description:\r\n        this.state.drawerType === \"ADD\"\r\n          ? \"Giai đoạn bạn vừa tao đã được thêm mới thành công.\"\r\n          : \"Giai đoạn bạn vừa sửa đã được cập nhật thành công.\",\r\n    });\r\n  };\r\n\r\n  showAddPhase = () => {\r\n    this.setState({\r\n      showDrawer: true,\r\n      drawerType: \"ADD\",\r\n      name: \"\",\r\n      estimatedTime: \"\",\r\n      estimatedTimeUnit: \"\",\r\n      description: \"\",\r\n    });\r\n  };\r\n\r\n  editPhase = (id) => {\r\n    const phase = this.props.listPhase.find(\r\n        (phase) => phase._id === id\r\n      );\r\n      const {\r\n        name,\r\n        estimatedTime,\r\n        estimatedTimeUnit,\r\n        description,\r\n      } = phase;\r\n      this.setState({\r\n        name,\r\n        estimatedTime,\r\n        estimatedTimeUnit,\r\n        description,\r\n        editId: id,\r\n        showDrawer: true,\r\n        drawerType: \"EDIT\",\r\n      });\r\n  };\r\n\r\n  deletePhase = (id) => {\r\n    this.props.deletePhase({ id });\r\n  };\r\n\r\n  handleChangeText = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleCreate = () => {\r\n    const { name, estimatedTime, estimatedTimeUnit, description } = this.state;\r\n    this.props.postPhase({\r\n      projectId: this.props.match.params.id_project,\r\n      name,\r\n      estimatedTime: Number(estimatedTime),\r\n      estimatedTimeUnit,\r\n      description,\r\n    });\r\n    this.openNotificationWithIcon(\"success\");\r\n    this.setState({\r\n      name: \"\",\r\n      estimatedTime: \"\",\r\n      estimatedTimeUnit: \"\",\r\n      description: \"\",\r\n    });\r\n  };\r\n\r\n  handleEdit = () => {\r\n    const {\r\n        editId,\r\n        name,\r\n        estimatedTime,\r\n        estimatedTimeUnit,\r\n        description,\r\n      } = this.state;\r\n      this.props.putPhase({\r\n        _id: editId,\r\n        name,\r\n        estimatedTime: Number(estimatedTime),\r\n        estimatedTimeUnit,\r\n        description,\r\n      });\r\n      this.openNotificationWithIcon(\"success\");\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      showDrawer,\r\n      drawerType,\r\n      columnData,\r\n      name,\r\n      description,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        <Button type=\"primary\" className=\"add-btn\" onClick={this.showAddPhase}>\r\n          Thêm mới giai đoạn\r\n        </Button>\r\n        <Table\r\n          dataSource={this.props.listPhase}\r\n          columns={columnData}\r\n          pagination={false}\r\n          bordered\r\n          scroll={{ x: \"max-content\" }}\r\n        />\r\n        <Drawer\r\n          title={drawerType === \"ADD\" ? \"Thêm mới giai đoạn\" : \"Sửa giai đoạn\"}\r\n          placement=\"right\"\r\n          closable={true}\r\n          width={300}\r\n          onClose={() => this.setState({ showDrawer: false })}\r\n          visible={showDrawer}\r\n        >\r\n          <Form\r\n            layout=\"vertical\"\r\n            hideRequiredMark\r\n            onFinish={\r\n              drawerType === \"ADD\" ? this.handleCreate : this.handleEdit\r\n            }\r\n          >\r\n            <Row gutter={16}>\r\n              <Input\r\n                placeholder=\"Nhập tên giai đoạn\"\r\n                name=\"name\"\r\n                value={name}\r\n                onChange={this.handleChangeText}\r\n              />\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Input.TextArea\r\n                rows={4}\r\n                placeholder=\"Nhập mô tả\"\r\n                name=\"description\"\r\n                value={description}\r\n                onChange={this.handleChangeText}\r\n              />\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Select\r\n                name=\"estimatedTimeUnit\"\r\n                value={estimatedTimeUnit}\r\n                onChange={(value) =>\r\n                  this.setState({ estimatedTimeUnit: value })\r\n                }\r\n              >\r\n                <Select.Option value=\"\">Chọn đơn vị thời gian</Select.Option>\r\n                <Select.Option value=\"Ngày\">Ngày</Select.Option>\r\n                <Select.Option value=\"Tháng\">Tháng</Select.Option>\r\n                <Select.Option value=\"Năm\">Năm</Select.Option>\r\n              </Select>\r\n            </Row>\r\n            <Row gutter={16} className=\"row\">\r\n              <Input\r\n                type=\"number\"\r\n                placeholder=\"Nhập thời gian dự toán\"\r\n                name=\"estimatedTime\"\r\n                value={estimatedTime}\r\n                onChange={this.handleChangeText}\r\n              />\r\n            </Row>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              {drawerType === \"ADD\" ? \"Thêm mới\" : \"Cập nhật\"}\r\n            </Button>\r\n          </Form>\r\n        </Drawer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getPhase: (data) => dispatch(getPhase(data)),\r\n  postPhase: (data) => dispatch(postPhase(data)),\r\n  deletePhase: (data) => dispatch(deletePhase(data)),\r\n  putPhase: (data) => dispatch(putPhase(data)),\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n  listPhase: state.phase.listPhase,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManagePhaseScreen);\r\n","E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\phase.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\phase.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\phase.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-task\\index.js",["162","163"],"import React, { Component } from \"react\";\r\nimport { deleteTask, getTask, postTask, putTask } from \"../../../actions/task\";\r\nimport \"./style.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  Popconfirm,\r\n  Table,\r\n  Button,\r\n  Drawer,\r\n  Input,\r\n  Row,\r\n  Select,\r\n  notification,\r\n} from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Form from \"antd/lib/form/Form\";\r\n\r\nclass ManageTaskScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showDrawer: false,\r\n      drawerType: \"ADD\",\r\n      columnData: [],\r\n      name: \"\",\r\n      description: \"\",\r\n      estimatedTime: \"\",\r\n      estimatedTimeUnit: \"\",\r\n      workerNum: \"\",\r\n      workerUnitFee: \"\",\r\n      editId: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getTask({ id: this.props.match.params.id_phase });\r\n    this.setState({\r\n      columnData: [\r\n        {\r\n          title: \"Tên công việc\",\r\n          dataIndex: \"name\",\r\n        },\r\n        {\r\n          title: \"Mô tả\",\r\n          dataIndex: \"description\",\r\n          width: 500,\r\n        },\r\n        {\r\n          title: \"Ghi chú\",\r\n          dataIndex: \"note\",\r\n        },\r\n        {\r\n          title: \"Thời gian dự toán\",\r\n          dataIndex: \"estimatedTime\",\r\n        },\r\n        {\r\n          title: \"Đơn vị thời gian\",\r\n          dataIndex: \"estimatedTimeUnit\",\r\n        },\r\n        {\r\n          title: \"Số lượng công nhân\",\r\n          dataIndex: \"workerNum\",\r\n        },\r\n        {\r\n          title: \"Tiền lương công nhân\",\r\n          dataIndex: \"workerUnitFee\",\r\n        },\r\n        {\r\n          title: \"Vật liệu\",\r\n          render: ({ _id }) => <Link to={\"/material/\" + _id}>Vật liệu</Link>,\r\n        },\r\n        {\r\n          title: \"Đo đạc\",\r\n          render: ({ _id }) => <Link to={\"/measurement/\" + _id}>Đo đạc</Link>,\r\n        },\r\n        {\r\n          title: \"Sửa\",\r\n          render: ({ _id }) => <a onClick={() => this.editTask(_id)}>Sửa</a>,\r\n        },\r\n        {\r\n          title: \"Xóa\",\r\n          render: ({ _id }) => (\r\n            <Popconfirm\r\n              title=\"Bạn có chắc chắn muốn xóa？\"\r\n              okText=\"Có\"\r\n              cancelText=\"Không\"\r\n              onConfirm={() => this.deleteTask(_id)}\r\n            >\r\n              <a href=\"\">Xóa</a>\r\n            </Popconfirm>\r\n          ),\r\n        },\r\n      ],\r\n    });\r\n  }\r\n\r\n  openNotificationWithIcon = (type) => {\r\n    notification[type]({\r\n      message:\r\n        this.state.drawerType === \"ADD\"\r\n          ? \"Thêm mới thành công\"\r\n          : \"Cập nhật thành công\",\r\n      description:\r\n        this.state.drawerType === \"ADD\"\r\n          ? \"Công việc bạn vừa tao đã được thêm mới thành công.\"\r\n          : \"Công việc bạn vừa sửa đã được cập nhật thành công.\",\r\n    });\r\n  };\r\n\r\n  showAddTask = () => {\r\n    this.setState({\r\n      showDrawer: true,\r\n      drawerType: \"ADD\",\r\n      name: \"\",\r\n      estimatedTime: \"\",\r\n      estimatedTimeUnit: \"\",\r\n      description: \"\",\r\n      workerNum: \"\",\r\n      workerUnitFee: \"\",\r\n    });\r\n  };\r\n\r\n  editTask = (id) => {\r\n    const task = this.props.listTask.find((task) => task._id === id);\r\n    const {\r\n      name,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      description,\r\n      workerNum,\r\n      workerUnitFee,\r\n    } = task;\r\n    this.setState({\r\n      name,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      description,\r\n      workerNum,\r\n      workerUnitFee,\r\n      editId: id,\r\n      showDrawer: true,\r\n      drawerType: \"EDIT\",\r\n    });\r\n  };\r\n\r\n  deleteTask = (id) => {\r\n    this.props.deleteTask({ id });\r\n  };\r\n\r\n  handleChangeText = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleCreate = () => {\r\n    const {\r\n      name,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      description,\r\n      workerNum,\r\n      workerUnitFee,\r\n    } = this.state;\r\n    this.props.postTask({\r\n      phaseId: this.props.match.params.id_phase,\r\n      name,\r\n      estimatedTime: Number(estimatedTime),\r\n      estimatedTimeUnit,\r\n      description,\r\n      workerNum: Number(workerNum),\r\n      workerUnitFee: Number(workerUnitFee),\r\n    });\r\n    this.openNotificationWithIcon(\"success\");\r\n    this.setState({\r\n      name: \"\",\r\n      estimatedTime: \"\",\r\n      estimatedTimeUnit: \"\",\r\n      description: \"\",\r\n      workerNum: \"\",\r\n      workerUnitFee: \"\",\r\n    });\r\n  };\r\n\r\n  handleEdit = () => {\r\n    const {\r\n      editId,\r\n      name,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      description,\r\n      workerNum,\r\n      workerUnitFee,\r\n    } = this.state;\r\n    this.props.putPhase({\r\n      _id: editId,\r\n      name,\r\n      estimatedTime: Number(estimatedTime),\r\n      estimatedTimeUnit,\r\n      description,\r\n      workerNum: Number(workerNum),\r\n      workerUnitFee: Number(workerUnitFee),\r\n    });\r\n    this.openNotificationWithIcon(\"success\");\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      showDrawer,\r\n      drawerType,\r\n      columnData,\r\n      name,\r\n      description,\r\n      estimatedTime,\r\n      estimatedTimeUnit,\r\n      workerNum,\r\n      workerUnitFee,\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        <Button type=\"primary\" className=\"add-btn\" onClick={this.showAddTask}>\r\n          Thêm mới công việc\r\n        </Button>\r\n        <Table\r\n          dataSource={this.props.listTask}\r\n          columns={columnData}\r\n          pagination={false}\r\n          bordered\r\n          scroll={{ x: \"max-content\" }}\r\n        />\r\n        <Drawer\r\n          title={drawerType === \"ADD\" ? \"Thêm mới công việc\" : \"Sửa công việc\"}\r\n          placement=\"right\"\r\n          closable={true}\r\n          width={300}\r\n          onClose={() => this.setState({ showDrawer: false })}\r\n          visible={showDrawer}\r\n        >\r\n          <Form\r\n            layout=\"vertical\"\r\n            hideRequiredMark\r\n            onFinish={\r\n              drawerType === \"ADD\" ? this.handleCreate : this.handleEdit\r\n            }\r\n          >\r\n            <Row gutter={16}>\r\n              <Input\r\n                placeholder=\"Nhập tên công việc\"\r\n                name=\"name\"\r\n                value={name}\r\n                onChange={this.handleChangeText}\r\n              />\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Input.TextArea\r\n                rows={4}\r\n                placeholder=\"Nhập mô tả\"\r\n                name=\"description\"\r\n                value={description}\r\n                onChange={this.handleChangeText}\r\n              />\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Select\r\n                name=\"estimatedTimeUnit\"\r\n                value={estimatedTimeUnit}\r\n                onChange={(value) =>\r\n                  this.setState({ estimatedTimeUnit: value })\r\n                }\r\n              >\r\n                <Select.Option value=\"\">Chọn đơn vị thời gian</Select.Option>\r\n                <Select.Option value=\"Ngày\">Ngày</Select.Option>\r\n                <Select.Option value=\"Tháng\">Tháng</Select.Option>\r\n                <Select.Option value=\"Năm\">Năm</Select.Option>\r\n              </Select>\r\n            </Row>\r\n            <Row gutter={16} className=\"row\">\r\n              <Input\r\n                type=\"number\"\r\n                placeholder=\"Nhập thời gian dự toán\"\r\n                name=\"estimatedTime\"\r\n                value={estimatedTime}\r\n                onChange={this.handleChangeText}\r\n              />\r\n            </Row>\r\n            <Row gutter={16} className=\"row\">\r\n              <Input\r\n                type=\"number\"\r\n                placeholder=\"Nhập số lượng công nhân\"\r\n                name=\"workerNum\"\r\n                value={workerNum}\r\n                onChange={this.handleChangeText}\r\n              />\r\n            </Row>\r\n            <Row gutter={16} className=\"row\">\r\n              <Input\r\n                type=\"number\"\r\n                placeholder=\"Nhập lương mỗi công nhân\"\r\n                name=\"workerUnitFee\"\r\n                value={workerUnitFee}\r\n                onChange={this.handleChangeText}\r\n              />\r\n            </Row>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              {drawerType === \"ADD\" ? \"Thêm mới\" : \"Cập nhật\"}\r\n            </Button>\r\n          </Form>\r\n        </Drawer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getTask: (data) => dispatch(getTask(data)),\r\n  postTask: (data) => dispatch(postTask(data)),\r\n  deleteTask: (data) => dispatch(deleteTask(data)),\r\n  putTask: (data) => dispatch(putTask(data)),\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n  listTask: state.task.listTask,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTaskScreen);\r\n","E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\task.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\measurement.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\task.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\sagas\\material.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\measurement.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\actions\\material.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-material\\index.js",["164","165"],"import React, { Component } from \"react\";\r\nimport {\r\n  deleteMaterial,\r\n  getMaterial,\r\n  postMaterial,\r\n  putMaterial,\r\n} from \"../../../actions/material\";\r\nimport \"./style.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  Popconfirm,\r\n  Table,\r\n  Button,\r\n  Drawer,\r\n  Input,\r\n  Row,\r\n  notification,\r\n} from \"antd\";\r\nimport Form from \"antd/lib/form/Form\";\r\nimport \"./style.scss\";\r\n\r\nclass ManageMaterialScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showDrawer: false,\r\n      drawerType: \"ADD\",\r\n      columnData: [],\r\n      name: \"\",\r\n      quantity: \"\",\r\n      unit: \"\",\r\n      unitPrice: \"\",\r\n      editId: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getMaterial({ id: this.props.match.params.id_task });\r\n    this.setState({\r\n      columnData: [\r\n        {\r\n          title: \"Tên vật liệu\",\r\n          dataIndex: \"name\",\r\n        },\r\n        {\r\n          title: \"Số lượng\",\r\n          dataIndex: \"quantity\",\r\n        },\r\n        {\r\n          title: \"Đơn vị vật liệu\",\r\n          dataIndex: \"unit\",\r\n        },\r\n        {\r\n          title: \"Đơn giá\",\r\n          dataIndex: \"unitPrice\",\r\n        },\r\n        {\r\n          title: \"Sửa\",\r\n          render: ({ _id }) => (\r\n            <a onClick={() => this.editMaterial(_id)}>Sửa</a>\r\n          ),\r\n        },\r\n        {\r\n          title: \"Xóa\",\r\n          render: ({ _id }) => (\r\n            <Popconfirm\r\n              title=\"Bạn có chắc chắn muốn xóa？\"\r\n              okText=\"Có\"\r\n              cancelText=\"Không\"\r\n              onConfirm={() => this.deleteMaterial(_id)}\r\n            >\r\n              <a href=\"\">Xóa</a>\r\n            </Popconfirm>\r\n          ),\r\n        },\r\n      ],\r\n    });\r\n  }\r\n\r\n  openNotificationWithIcon = (type) => {\r\n    notification[type]({\r\n      message:\r\n        this.state.drawerType === \"ADD\"\r\n          ? \"Thêm mới thành công\"\r\n          : \"Cập nhật thành công\",\r\n      description:\r\n        this.state.drawerType === \"ADD\"\r\n          ? \"Vật liệu bạn vừa tao đã được thêm mới thành công.\"\r\n          : \"Vật liệu bạn vừa sửa đã được cập nhật thành công.\",\r\n    });\r\n  };\r\n\r\n  showAddMaterial = () => {\r\n    this.setState({\r\n      showDrawer: true,\r\n      drawerType: \"ADD\",\r\n      name: \"\",\r\n      quantity: \"\",\r\n      unit: \"\",\r\n      unitPrice: \"\",\r\n    });\r\n  };\r\n\r\n  editMaterial = (id) => {\r\n    const material = this.props.listMaterial.find(\r\n      (material) => material._id === id\r\n    );\r\n    const { name, quantity, unit, unitPrice } = material;\r\n    this.setState({\r\n      name,\r\n      quantity,\r\n      unit,\r\n      unitPrice,\r\n      editId: id,\r\n      showDrawer: true,\r\n      drawerType: \"EDIT\",\r\n    });\r\n  };\r\n\r\n  deleteMaterial = (id) => {\r\n    this.props.deleteMaterial({ id });\r\n  };\r\n\r\n  handleChangeText = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleCreate = () => {\r\n    const { name, quantity, unit, unitPrice } = this.state;\r\n    this.props.postMaterial({\r\n      taskId: this.props.match.params.id_task,\r\n      name,\r\n      quantity: Number(quantity),\r\n      unit,\r\n      unitPrice: Number(unitPrice),\r\n    });\r\n    this.openNotificationWithIcon(\"success\");\r\n    this.setState({\r\n      name: \"\",\r\n      quantity: \"\",\r\n      unit: \"\",\r\n      unitPrice: \"\",\r\n    });\r\n  };\r\n\r\n  handleEdit = () => {\r\n    const { editId, name, quantity, unit, unitPrice } = this.state;\r\n    this.props.putMaterial({\r\n      _id: editId,\r\n      name,\r\n      quantity: Number(quantity),\r\n      unit,\r\n      unitPrice: Number(unitPrice),\r\n    });\r\n    this.openNotificationWithIcon(\"success\");\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      showDrawer,\r\n      drawerType,\r\n      columnData,\r\n      name,\r\n      quantity,\r\n      unit,\r\n      unitPrice,\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        <Button\r\n          type=\"primary\"\r\n          className=\"add-btn\"\r\n          onClick={this.showAddMaterial}\r\n        >\r\n          Thêm mới vật liệu\r\n        </Button>\r\n        <Table\r\n          dataSource={this.props.listMaterial}\r\n          columns={columnData}\r\n          pagination={false}\r\n          bordered\r\n          scroll={{ x: \"max-content\" }}\r\n        />\r\n        <Drawer\r\n          title={drawerType === \"ADD\" ? \"Thêm mới vật liệu\" : \"Sửa vật liệu\"}\r\n          placement=\"right\"\r\n          closable={true}\r\n          width={300}\r\n          onClose={() => this.setState({ showDrawer: false })}\r\n          visible={showDrawer}\r\n        >\r\n          <Form\r\n            layout=\"vertical\"\r\n            hideRequiredMark\r\n            onFinish={\r\n              drawerType === \"ADD\" ? this.handleCreate : this.handleEdit\r\n            }\r\n          >\r\n            <Row gutter={16}>\r\n              <Input\r\n                placeholder=\"Nhập tên vật liệu\"\r\n                name=\"name\"\r\n                value={name}\r\n                onChange={this.handleChangeText}\r\n              />\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Input\r\n                placeholder=\"Nhập số lượng\"\r\n                type=\"number\"\r\n                name=\"quantity\"\r\n                value={quantity}\r\n                onChange={this.handleChangeText}\r\n              />\r\n            </Row>\r\n            <Row gutter={16}>\r\n              <Input\r\n                placeholder=\"Nhập đơn vị vật liệu\"\r\n                name=\"unit\"\r\n                value={unit}\r\n                onChange={this.handleChangeText}\r\n              />\r\n            </Row>\r\n            <Row gutter={16} className=\"row\">\r\n              <Input\r\n                type=\"number\"\r\n                placeholder=\"Nhập đơn giá\"\r\n                name=\"unitPrice\"\r\n                value={unitPrice}\r\n                onChange={this.handleChangeText}\r\n              />\r\n            </Row>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              {drawerType === \"ADD\" ? \"Thêm mới\" : \"Cập nhật\"}\r\n            </Button>\r\n          </Form>\r\n        </Drawer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getMaterial: (data) => dispatch(getMaterial(data)),\r\n  postMaterial: (data) => dispatch(postMaterial(data)),\r\n  deleteMaterial: (data) => dispatch(deleteMaterial(data)),\r\n  putMaterial: (data) => dispatch(putMaterial(data)),\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n  listMaterial: state.material.listMaterial,\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ManageMaterialScreen);\r\n","E:\\Visual Studio Code\\agriculture-manager\\src\\containers\\home\\manage-measurement\\index.js",["166","167"],"E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\task.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\material.js",[],"E:\\Visual Studio Code\\agriculture-manager\\src\\reducers\\measurement.js",[],{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","severity":1,"message":"173","line":90,"column":13,"nodeType":"174","endLine":90,"endColumn":64},{"ruleId":"172","severity":1,"message":"175","line":101,"column":32,"nodeType":"174","endLine":101,"endColumn":73},{"ruleId":"172","severity":1,"message":"173","line":112,"column":15,"nodeType":"174","endLine":112,"endColumn":26},{"ruleId":"172","severity":1,"message":"175","line":52,"column":32,"nodeType":"174","endLine":52,"endColumn":71},{"ruleId":"172","severity":1,"message":"173","line":63,"column":15,"nodeType":"174","endLine":63,"endColumn":26},{"ruleId":"172","severity":1,"message":"175","line":74,"column":32,"nodeType":"174","endLine":74,"endColumn":70},{"ruleId":"172","severity":1,"message":"173","line":85,"column":15,"nodeType":"174","endLine":85,"endColumn":26},{"ruleId":"172","severity":1,"message":"175","line":60,"column":13,"nodeType":"174","endLine":60,"endColumn":55},{"ruleId":"172","severity":1,"message":"173","line":72,"column":15,"nodeType":"174","endLine":72,"endColumn":26},{"ruleId":"172","severity":1,"message":"175","line":60,"column":13,"nodeType":"174","endLine":60,"endColumn":58},{"ruleId":"172","severity":1,"message":"173","line":72,"column":15,"nodeType":"174","endLine":72,"endColumn":26},"no-native-reassign",["176"],"no-negated-in-lhs",["177"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]